-- MySQL Script generated by MySQL Workbench
-- 09/22/14 04:23:23
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema levelspro
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `levelspro` DEFAULT CHARACTER SET utf8 ;
USE `levelspro` ;
USE `levelspro` ;

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`login_duration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`login_duration` (`start_id` INT, `start_date` INT, `finish_id` INT, `finish_date` INT, `duration_minutes` INT, `duration_hours` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`total_hours_worked`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`total_hours_worked` (`sum(Worked_Hour)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`total_levels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`total_levels` (`count(*)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`total_questions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`total_questions` (`count(*)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`total_sales`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`total_sales` (`sum(score)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`total_sites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`total_sites` (`count(*)` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`total_users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`total_users` (`Role` INT, `total` INT);

-- -----------------------------------------------------
-- Placeholder table for view `levelspro`.`v_userlevelscores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `levelspro`.`v_userlevelscores` (`UserID` INT, `Role_ID` INT, `Level_ID` INT, `KPI_ID` INT, `Target_ID` INT, `Level_Name` INT, `KPI_name` INT, `Target_Value` INT, `score` INT, `current_percentage` INT, `Points` INT);

-- -----------------------------------------------------
-- function SPLIT_STR
-- -----------------------------------------------------

USE `levelspro`;
DROP function IF EXISTS `levelspro`.`SPLIT_STR`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` FUNCTION `SPLIT_STR`(x VARCHAR(255), delim VARCHAR(12), pos INT) RETURNS varchar(255) CHARSET utf8
BEGIN

RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos), LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1), delim, '');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function fu_RaiseError
-- -----------------------------------------------------

USE `levelspro`;
DROP function IF EXISTS `levelspro`.`fu_RaiseError`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` FUNCTION `fu_RaiseError`(p_MESSAGE VARCHAR(255)) RETURNS int(11)
BEGIN

	DECLARE ERROR INTEGER;

		set ERROR := p_MESSAGE;

		RETURN 0;	

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_APIForPlayer
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_APIForPlayer`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_APIForPlayer`()
BEGIN

	Select vscore.UserID, CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName)  AS Player_Name,tblRoles.Role_Name,CONCAT('Level-',tblLevel.Level_Position) as Levelno,vscore.Level_Name,KPI_name,Target_value,score,tbluser.U_Points,tblUserImages.Player_Thumbnail,

(select (IFNULL(sum(v_UserLevelScores.current_percentage),0)) / Count(*) from v_UserLevelScores where v_UserLevelScores.Level_ID=vscore.Level_ID and v_UserLevelScores.UserID=vscore.UserID ) AS Percentage

 

,BaseHours



  ,(TIMESTAMPDIFF(HOUR,CurDate,Now())) as WorkedHours

FROM v_UserLevelScores vscore



INNER JOIN tblLevelPerformance ON vscore.Level_ID = tblLevelPerformance.current_level AND vscore.UserID = tblLevelPerformance.user_id

INNER JOIN tblUser ON vscore.UserID = tblUser.UserID

LEFT JOIN tblUserImages ON vscore.UserID = tblUserImages.UserID AND tblUserImages.U_Current = 1

INNER JOIN tblRoles ON

vscore.Role_ID = tblRoles.Role_ID 

INNER JOIN tblLevel ON vscore.Level_ID = tblLevel.Level_ID

WHERE tblLevelPerformance.level_achieved = 0

ORDER BY vscore.UserID

;





END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_CheckPassword
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_CheckPassword`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_CheckPassword`(p_UserID int, p_Password varchar(50))
BEGIN

	

	SELECT UserID,U_Name FROM tblUser 

	WHERE UserID = p_UserID AND U_Password = p_Password;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_CheckPasswordNULL
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_CheckPasswordNULL`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_CheckPasswordNULL`(p_U_Name varchar(50))
BEGIN

	SELECT UserID,U_Name FROM tblUser

	WHERE U_Name = p_U_Name AND U_Password IS NULL;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_CheckSecurityAnswer
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_CheckSecurityAnswer`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_CheckSecurityAnswer`(p_UserID int)
BEGIN

	SELECT * FROM tblSecurityAnswers

	WHERE UserID = p_UserID ;





END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_CheckTest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_CheckTest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_CheckTest`(p_Name Varchar(50),p_Password VARCHAR(50))
BEGIN







Select * from tblUser

				



WHERE U_Name =p_Name

and U_password =p_Password ;







END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_CheckUserName
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_CheckUserName`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_CheckUserName`(p_U_Name varchar(50))
BEGIN

	SELECT UserID,U_Name FROM tblUser

	WHERE U_Name = p_U_Name;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_Contest_PlayersScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_Contest_PlayersScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_Contest_PlayersScore`(p_ContestID INT)
BEGIN



SELECT user_id,

(SELECT CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName))

 AS    U_FullName,			

			 tblContestPosition.contest_id,

(SELECT tblContest.Contest_Name

FROM tblContest WHERE tblContest.Contest_ID = tblContestPosition.contest_id) as Contest_Name,

			 contest_rank,

			 contest_scores as score

 FROM tblContestPosition INNER JOIN tblContest on tblContestPosition.contest_id = tblContest.Contest_ID

  INNER JOIN tblUser ON tblUser.UserID = tblContestPosition.User_ID 

 WHERE tblContestPosition.contest_id = p_ContestID AND tblContest.Active = 1 AND tblUser.Active = 1

 ORDER BY contest_rank ASC;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteAssignAward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteAssignAward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteAssignAward`(IN `p_UserID` int,IN `p_AwardID` int)
BEGIN
	
DELETE FROM tblUserAwards WHERE tblUserAwards.user_id = p_UserID AND tblUserAwards.userAwardsId=p_AwardID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteAward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteAward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteAward`(p_AwardID int)
BEGIN

delete from tblAwards where Award_ID = p_AwardID ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteAwardImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteAwardImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteAwardImage`(p_ID int)
BEGIN

	

DELETE FROM tblAwardImages where ID = p_ID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteContest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteContest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteContest`(p_ContestID int)
BEGIN

delete from tblContest where Contest_ID = p_ContestID ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteDataElement
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteDataElement`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteDataElement`(p_ElementID int)
BEGIN

DELETE FROM tbldataelement WHERE ElementID = p_ElementID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteDataSet
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteDataSet`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteDataSet`(p_DataSetID int)
BEGIN

DELETE FROM tblMatchDataSets WHERE DataSetID = p_DataSetID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteDataSetLevel
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteDataSetLevel`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteDataSetLevel`(p_DataSetID int)
BEGIN
	
DELETE FROM tblMatchDataSetLevels WHERE DataSetID = p_DataSetID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteMatch
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteMatch`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteMatch`(p_MatchID int)
BEGIN
	
DELETE FROM tblmatch WHERE MatchID = p_MatchID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteMatchUserScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteMatchUserScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteMatchUserScore`(p_UserID int)
BEGIN

Delete from tblusermatchpointstemperory where UserID=p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteMessage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteMessage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteMessage`(p_MessageID INT)
BEGIN

	DELETE FROM tblMessages WHERE ID = p_MessageID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteQuestion
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteQuestion`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteQuestion`(p_QuestionID int)
BEGIN

DELETE FROM tblQuizQuestions WHERE tblQuizQuestions.QuestionID = p_QuestionID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteQuestionLevel
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteQuestionLevel`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteQuestionLevel`(p_QuestionID int)
BEGIN
	
DELETE FROM tblQuestionLevels WHERE tblQuestionLevels.QuestionID = p_QuestionID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteQuiz
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteQuiz`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteQuiz`(p_QuizID int)
BEGIN

	

DELETE FROM tblQuiz WHERE tblQuiz.QuizID = p_QuizID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteQuizLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteQuizLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteQuizLevels`(p_QuizID INT)
BEGIN
	DELETE FROM tblquizlevels  WHERE tblquizlevels.QuizID = p_QuizID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteRewardImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteRewardImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteRewardImage`(p_ID int)
BEGIN

	

DELETE FROM tblRewardImages where ID = p_ID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteRound
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteRound`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteRound`(p_RoundID int)
BEGIN

DELETE FROM tblround WHERE RoundID = p_RoundID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteSecurityAnswers
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteSecurityAnswers`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteSecurityAnswers`(p_UserID int)
BEGIN
Delete from tblSecurityAnswers where UserID = p_UserID; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteTarget
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteTarget`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteTarget`(p_TargetID int)
BEGIN

delete from tblTarget where Target_ID = p_TargetID ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteUserImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteUserImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteUserImage`(p_UserIDImage INT)
BEGIN

	DELETE FROM tblUserImages WHERE U_UserIDImage = p_UserIDImage;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_DeleteUserScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_DeleteUserScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_DeleteUserScore`(p_UserID int)
BEGIN

Delete from tblUserQuizPointsTemperory where UserID=p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GelMilestonesDetail
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GelMilestonesDetail`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GelMilestonesDetail`(p_AwardID int)
BEGIN

	

SELECT * FROM





((SELECT SUM(Score) AS AchievedScore FROM tblScores WHERE U_Type = 'KPI' AND Type_ID = 

	(SELECT KPIID FROM tblAwards 

		WHERE Award_ID = p_AwardID)) AS AScore,

(SELECT tblTarget.Target_Value AS TargetValue FROM tblAwards 

INNER JOIN tblTarget ON

tblAwards.TargetID = tblTarget.Target_ID

WHERE Award_ID = p_AwardID) AS TValue

);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetAllSites
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetAllSites`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetAllSites`()
BEGIN

	

	SELECT site_id,site_name,site_type,site_address,Active FROM tblSite;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetAutomaticAwards
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetAutomaticAwards`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetAutomaticAwards`(p_UserID INT)
BEGIN
	/*SELECT
tblAwards.Award_ID,
tblAwards.Award_Name,
tblAwards.Award_Desc,
tblKPI.KPI_name,
tblAwards.KPIID,
tblAwards.Target_Value,
SUM(tblScores.Score) AS Score
,(((IFNULL(sum(tblScores.Score),0)) / tblAwards.Target_Value) * 100) AS Percentage,
'automatic' AS Type
,'' AS awarded_date
,(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image
FROM
tblAwards

INNER JOIN tblKPI ON tblAwards.KPIID = tblKPI.KPI_ID
INNER JOIN tblScores ON tblAwards.KPIID = tblScores.Type_ID AND tblScores.User_ID = p_UserID AND tblScores.U_Type = 'KPI'
WHERE tblAwards.Award_Manual = 0 AND tblAwards.KPIID = tblScores.Type_ID AND tblScores.User_ID = p_UserID AND tblScores.U_Type = 'KPI'

UNION

SELECT
tblAwards.Award_ID,
tblAwards.Award_Name,
tblAwards.Award_Desc
,'' AS KPI_name,
tblAwards.KPIID,
tblAwards.Target_Value,
'' AS Score
,'' AS Percentage
,'manual' AS Type
,tblUserAwards.awarded_date
,(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image
FROM
tblAwards
INNER JOIN tblUserAwards ON tblAwards.Award_ID = tblUserAwards.award_id
INNER JOIN tblAwardImages ON tblAwards.Award_ID = tblAwardImages.Award_ID
WHERE tblAwards.Award_Manual = 1  AND tblUserAwards.user_id = p_UserID*/



/*SELECT
tblAwards.Award_ID,
tblAwards.Award_Name,
tblAwards.Award_Desc,
tblAwards.KPIID,
tblAwards.Target_Value,
tblAwards.Award_Manual,
tblAwards.Active,
tblAwards.AwardCategoryID,

(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image,
(select 'yes' from tblUserAwards where award_id=tblAwards.Award_ID and tblUserAwards.user_id=p_UserID ) AS AchievedAward,
( Select  IFNULL((((IFNULL(sum(tblScores.Score),0)) / tblAwards.Target_Value) * 100),0) from tblScores where tblScores.User_ID=p_UserID and tblScores.Type_ID=tblAwards.KPIID and tblScores.U_Type='KPI'  ) AS Percentage,
( Select  IFNULL(sum(tblScores.Score),0) from tblScores where tblScores.User_ID=p_UserID  and tblScores.Type_ID=tblAwards.KPIID and tblScores.U_Type='KPI'  ) AS Scores,
(select awarded_date from tblUserAwards where award_id=tblAwards.Award_ID and  tblUserAwards.user_id=p_UserID ) AS awarded_date,
(select popup_showed from tblUserAwards where award_id=tblAwards.Award_ID and  tblUserAwards.user_id=p_UserID ) AS popup_showed,
tblKPI.KPI_name
FROM
tblAwards
LEFT OUTER JOIN  tblKPI ON tblAwards.KPIID = tblKPI.KPI_ID
where tblAwards.Active = 1*/

select tblAwards.Award_Name,tblUserAwards.popup_showed,tblUserAwards.awarded_date,tblUserAwards.user_id,tblUserAwards.manual as Award_Manual,tblUserAwards.award_id,
( Select  IFNULL((((IFNULL(sum(tblScores.Score),0)) / tblAwards.Target_Value) * 100),0) from tblScores where tblScores.User_ID=p_UserID and tblScores.Type_ID=tblAwards.KPIID and tblScores.U_Type='Award'  ) AS Percentage,
(Select  IFNULL(sum(tblScores.Score),0) from tblScores where tblScores.User_ID=p_UserID  and tblScores.Type_ID=tblAwards.KPIID and tblScores.U_Type='Award'  ) AS Scores,
(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image,
(Select AwardCategoryID FROM tblAwards Where tblAwards.Award_ID = tblUserAwards.award_id) as AwardCategoryID

from tblAwards,tblUserAwards

Where tblAwards.Award_ID = tblUserAwards.award_id and tblUserAwards.user_id=p_UserID
;

SELECT Award_Manual ,Target_Value,Award_ID,Award_Name,Award_Desc,AwardCategoryID,
(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image,
(Select  IFNULL(sum(tblScores.Score),0) from tblScores where tblScores.User_ID=p_UserID  and tblScores.Type_ID=tblAwards.KPIID and tblScores.U_Type='Award'  ) AS Scores,
 ( Select  IFNULL((((IFNULL(sum(tblScores.Score),0)) / tblAwards.Target_Value) * 100),0) from tblScores where tblScores.User_ID=p_UserID and tblScores.Type_ID=tblAwards.KPIID and tblScores.U_Type='Award'  ) AS Percentage 
from tblAwards;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetAward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetAward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetAward`()
BEGIN



SELECT  Award_Name,

				Award_ID,				

				Award_Desc,

                Award_Manual,

				AwardCategoryID,

(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image,

(SELECT Award_Thumbnail FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Thumbnail,

				tblAwards.Active,	tblAwards.KPIID,tblAwards.Target_Value,tblKPI.KPI_name,tblAwards.Active 

FROM tblAwards

LEFT JOIN tblKPI ON

tblAwards.KPIID = tblKPI.KPI_ID

AND tblKPI.Active = 1;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetAwardDetails
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetAwardDetails`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetAwardDetails`(p_AwardID INT)
BEGIN

	SELECT  Award_Name,

					Award_ID,					

					Award_Desc,

					Active,

					AwardCategoryID

					

	FROM tblAwards	

	WHERE Award_ID = p_AwardID and Active = 1;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetAwardImages
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetAwardImages`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetAwardImages`()
BEGIN

SELECT ID, tblAwardImages.Award_ID, Award_Image,Award_Thumbnail, Uploaded_Date, Current_Image

FROM tblAwardImages

INNER JOIN tblAwards ON

tblAwards.Award_ID = tblAwardImages.Award_ID

WHERE tblAwards.Active = 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetCategory
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetCategory`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetCategory`()
BEGIN
Select * from tblQuizCategory;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetContest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetContest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetContest`()
BEGIN

SELECT Contest_ID,Contest_Graphics,Contest_Graphics_Ext,Contest_StartDate,Contest_EndDate,Contest_Name,tblContest.Role_ID,tblRoles.Role_Name, tblContest.Site_ID, tblSite.site_name, tblContest.KPIID, tblKPI.KPI_name ,tblContest.Active 

FROM tblContest

LEFT OUTER JOIN tblRoles ON

tblContest.Role_ID = tblRoles.Role_ID

INNER JOIN tblSite ON

tblContest.Site_ID = tblSite.site_id

INNER JOIN tblKPI ON

tblContest.KPIID = tblKPI.KPI_ID;

/*WHERE tblRoles.Active = 1; */

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetContestDetails
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetContestDetails`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetContestDetails`(`p_ContestID` int)
BEGIN



	SELECT Contest_ID,

					Contest_Name,					

					Contest_Graphics,

					Contest_Graphics_Ext,

					Contest_StartDate,

					Contest_EndDate,					

					tblContest.Active,

					tblContest.Contest_Descp

				FROM tblContest

WHERE tblContest.Contest_ID = p_ContestID and tblContest.Active = 1;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetDataElement
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetDataElement`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetDataElement`(p_Where VARCHAR(10000))
BEGIN	

DECLARE p_Select VARCHAR(2000);
DECLARE p_FinalQuery varchar(8000);

SET p_Select = 
'SELECT 
	ElementID,
    MatchID,
    ElementName,
	IsPicture,
    CreatedDate
FROM tbldataelement';

SET @p_FinalQuery = CONCAT(p_Select,p_Where);
PREPARE result from @p_FinalQuery;
EXECUTE result;
DEALLOCATE PREPARE result;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetDataSet
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetDataSet`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetDataSet`(p_Where VARCHAR(10000), p_Status int)
BEGIN

DECLARE p_Select VARCHAR(2000);

DECLARE p_FinalQuery varchar(8000);

IF(p_Status =1)
THEN

	SET p_Select = 
		'SELECT 
			DataSetID,
			DataSetElementsData,
			SiteID,
			MatchID,
			CreatedDate,
			DataSetImage,
			DataSetImageThumbnail
		FROM tblmatchdatasets
		INNER JOIN tblmatchdatasetlevels ON tblmatchdatasets.DataSetID = tblmatchdatasetlevels.DataSetID';

	SET @p_FinalQuery = CONCAT(p_Select,p_Where);

	PREPARE result from @p_FinalQuery;

	EXECUTE result;

	DEALLOCATE PREPARE result;

END IF;

IF(p_Status =0)
THEN

	SET p_Select = 
			'SELECT 
				DataSetID,
				DataSetElementsData,
				SiteID,
				MatchID,
				CreatedDate,
				DataSetImage,
				DataSetImageThumbnail
			FROM tblmatchdatasets';

	SET @p_FinalQuery = CONCAT(p_Select,p_Where);

	PREPARE result from @p_FinalQuery;

	EXECUTE result;

	DEALLOCATE PREPARE result;

END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetDataSetLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetDataSetLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetDataSetLevels`(p_DataSetID INT, p_RoleID INT)
BEGIN

	SELECT DataSetID, RoleID, LevelID FROM tblMatchDataSetLevels WHERE DataSetID = p_DataSetID AND RoleID = p_RoleID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetDropDown
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetDropDown`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetDropDown`(IN `p_ReferenceCode` varchar(50))
BEGIN

	

	SELECT ReferenceData_ID,Reference_Code,Item_Code,Description,Parent_ID FROM tblReferenceData 

	WHERE Reference_Code = p_ReferenceCode AND Active = 1;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetGame
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetGame`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetGame`()
BEGIN

Select * from tblQuizGames;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetGamesPlayLog
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetGamesPlayLog`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetGamesPlayLog`()
BEGIN

(SELECT 
	LogID,
	UserID,
	QuizID,
	QuizTime,
	0 AS QuizPlays
FROM tblQuizPlayLog)
UNION
(SELECT 
	LogID,
	UserID,
	MatchID AS QuizID,
	MatchTime AS QuizTime,
	MatchPlays AS QuizPlays
FROM tblMatchPlayLog)
ORDER BY 
	QuizTime DESC;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetGames_Player
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetGames_Player`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetGames_Player`(p_RoleID int,p_LevelID int)
BEGIN
	
(SELECT  
	SUM(PointsAchieved) AS QuizPoints, 
	tblQuiz.QuizID, 
	tblQuiz.QuizName,
	tblQuiz.QuizImageThumbnail,
	tblUser.UserID, 
	CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName,
	'Quiz' AS GameType,
	tblQuiz.CreatedDate
FROM tblUserQuizPoints
Right JOIN tblQuiz 
ON tblUserQuizPoints.QuizID = tblQuiz.QuizID
Left JOIN tblUser 
ON tblUserQuizPoints.UserID = tblUser.UserID
GROUP BY 
	QuizID,
	UserID)
UNION
(SELECT 
	UserMatchPoints.PointsAchieved AS QuizPoints, 
	tblmatch.MatchID AS QuizID, 
	tblmatch.MatchName AS QuizName,
	tblmatch.MatchImageThumbnail AS QuizImageThumbnail,
	tblUser.UserID, 
	CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName,
	'Match' AS GameType,
	tblmatch.CreatedDate
FROM tblmatch
LEFT JOIN
(SELECT 
	MAX(PointsAchieved) AS PointsAchieved, UserID, MatchID FROM tblusermatchpoints 
GROUP BY
	UserID, MatchID) AS UserMatchPoints ON tblmatch.MatchID = UserMatchPoints.MatchID
LEFT JOIN tblUser 
ON UserMatchPoints.UserID = tblUser.UserID)
ORDER BY
	CreatedDate DESC;

(Select 
	tblUserQuizPoints.UserQuizPointsID,
	tblUserQuizPoints.UserID,
	tblUserQuizPoints.QuizID,
	tblUserQuizPoints.QuestionID,
	tblUserQuizPoints.PointsAchieved,
	tblUserQuizPoints.ElaspedTime,
	tblUserQuizPoints.IsCorrect,
	tblUserQuizPoints.QuizTime,
	'Quiz' AS GameType
from tblUserQuizPoints)
UNION
(SELECT 
	tblusermatchpoints.UserMatchPointsID AS UserQuizPointsID,
	tblusermatchpoints.UserID,
	tblusermatchpoints.MatchID AS QuizID,
	'' AS QuestionID,
	tblusermatchpoints.PointsAchieved,
	tblusermatchpoints.ElaspedTime,
	tblusermatchpoints.IsCorrect,
	tblusermatchpoints.MatchTime AS QuizTime,
	'Match' AS GameType
FROM tblusermatchpoints)
ORDER BY
	QuizTime DESC;

(SELECT * FROM tblUserQuizPointsTemperory
INNER JOIN tblQuizQuestions 
ON tblUserQuizPointsTemperory.QuestionID= tblQuizQuestions.QuestionID)
UNION
(SELECT 
	tblUserMatchPointsTemperory.UserMatchPointsID AS UserQuizPointsID,
	tblUserMatchPointsTemperory.UserID,
	tblUserMatchPointsTemperory.MatchID AS QuizID,
	'' AS QuestionID,
	tblUserMatchPointsTemperory.PointsAchieved,
	tblUserMatchPointsTemperory.ElaspedTime,
	tblUserMatchPointsTemperory.IsCorrect,
	tblUserMatchPointsTemperory.MatchTime AS QuizTime,
	tblmatchdatasets.DataSetID,
	tblmatchdatasets.DataSetElementsData AS QuestionText,
	'' AS QuestionExplanation,
	'' AS Answer1,
	'' AS Answer2,
	'' AS Answer3,
	'' AS Answer4,
	'' AS CorrectAnswer,
	0 AS Category,
	tblmatchdatasets.SiteID,
	tblmatchdatasets.MatchID AS QuizID,
	tblmatchdatasets.DataSetImage AS QuestionImage,
	tblmatchdatasets.DataSetImageThumbnail AS QuestionImageThumbnail,
	'' AS ShortQuestion
FROM 
	tblUserMatchPointsTemperory
INNER JOIN tblmatchdatasets 
ON tblUserMatchPointsTemperory.MatchID = tblmatchdatasets.MatchID)
ORDER by
	QuizTime DESC;

(SELECT  
	SUM(PointsAchieved) AS QuizPoints, 
	tblQuiz.QuizID, 
	tblQuiz.QuizName,
	tblQuiz.QuizImageThumbnail,
	tblUser.UserID, 
	tblQuiz.TimesPlayablePerDay, 
	tblQuiz.KPI_ID,
	CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName,
	'Quiz' AS GameType,
	 '0' AS Mandatory,
	tblQuiz.CreatedDate
FROM tblUserQuizPoints
Right JOIN tblQuiz 
ON tblUserQuizPoints.QuizID = tblQuiz.QuizID
Left JOIN tblUser 
ON tblUserQuizPoints.UserID = tblUser.UserID
INNER JOIN tblquizlevels 
ON tblquiz.QuizID = tblquizlevels.QuizID
WHERE tblquizlevels.RoleID = p_RoleID AND tblquizlevels.LevelID =p_LevelID
GROUP BY 
	QuizID)
UNION
(SELECT 
	UserMatchPoints.PointsAchieved AS QuizPoints, 
	tblmatch.MatchID AS QuizID, 
	tblmatch.MatchName AS QuizName,
	tblmatch.MatchImageThumbnail AS QuizImageThumbnail,
	tblUser.UserID, 
	tblmatch.MaxPlaysPerDay AS TimesPlayablePerDay, 
	tblmatch.KPI_ID,
	CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName,
	'Match' AS GameType,
	'0' AS Mandatory,
	tblmatch.CreatedDate
FROM tblmatch
LEFT JOIN
(SELECT 
	MAX(PointsAchieved) AS PointsAchieved, UserID, MatchID FROM tblusermatchpoints 
GROUP BY
	UserID, MatchID) AS UserMatchPoints ON tblmatch.MatchID = UserMatchPoints.MatchID
LEFT JOIN tblUser 
ON UserMatchPoints.UserID = tblUser.UserID
GROUP BY 
	QuizID)
ORDER BY
	CreatedDate DESC;

(Select 
	tblquiz.QuizID
FROM tblquiz 
INNER JOIN tbltarget
ON tblquiz.KPI_ID = tbltarget.KPI_ID
WHERE 
	tbltarget.Level_ID = p_LevelID AND 
	tbltarget.Role_ID= p_RoleID)
UNION
(Select 
	tblmatch.MatchID AS QuizID
FROM tblmatch 
INNER JOIN tbltarget
ON tblmatch.KPI_ID = tbltarget.KPI_ID
WHERE 
	tbltarget.Level_ID = p_LevelID AND 
	tbltarget.Role_ID= p_RoleID) ;

Select Score, tblscores.User_ID, tblscores.Type_ID
from tblScores
Where U_Type ='KPI' AND LevelID = p_LevelID ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetImage`(p_UserID INT)
BEGIN

	SELECT U_Current,U_UploadDate,U_UserIDImage,tblUserImages.Active,tblUserImages.UserID,tblUser.U_Name,tblUserImages.Player_Image,tblUserImages.Player_Thumbnail

	FROM tblUserImages

	INNER JOIN tblUser ON

	tblUserImages.UserID = tblUser.UserID

	WHERE tblUser.Active = 1 AND tblUserImages.UserID = p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetKPI
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetKPI`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetKPI`()
BEGIN

SELECT tblKPI.KPI_ID,tblKPI.KPI_name,

			tblKPI.KPI_measure,tblKPI.KPI_type,tblKPI.Active, tblkpi.TipsDESC, tblkpi.TipsLINK, tblReferenceData.Description AS KPI_Type_Name,tblKPI.KPI_Category ,tblKPI.KPI_Descp

FROM tblKPI

INNER JOIN tblReferenceData ON

tblKPI.KPI_type = tblReferenceData.ReferenceData_ID

WHERE tblReferenceData.Active = 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLevelGame
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLevelGame`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLevelGame`()
BEGIN

	SELECT tblLevelGame.GameID,tblLevelGame.GameName, tblLevelGame.Active AS GameActive 

	FROM tblLevelGame;





END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLevelGameDDL
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLevelGameDDL`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLevelGameDDL`(p_GameID INT)
BEGIN

	SELECT tblLevelGameDDL.GameDropdownID,tblLevelGameDDL.GameDropdownName,tblLevelGameDDL.GameID,tblLevelGameDDL.Active AS GameDDLActive

	FROM tblLevelGameDDL

	WHERE tblLevelGameDDL.GameID = p_GameID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLevelPerformance
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLevelPerformance`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLevelPerformance`()
BEGIN
	
SELECT 
			 user_id,
(SELECT Level_Position from tblLevel WHERE tblLevelPerformance.last_level = tblLevel.Level_ID) as  previos_level,
			 (SELECT Level_Position from tblLevel WHERE tblLevelPerformance.current_level = tblLevel.Level_ID) as  current_level,
			 (SELECT Level_Position from tblLevel WHERE tblLevelPerformance.next_level = tblLevel.Level_ID) as next_level,
(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.next_level and tblLevel.Active = 1) as nextlevel_name,
(SELECT (tblLevelGameDDL.GameDropdownName) AS Reach from tblLevel INNER JOIN tblLevelGameDDL ON tblLevel.Reach = tblLevelGameDDL.GameDropdownID WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevel.Active = 1) as nextlevel,
(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevel.Active = 1) as currentlevel_name	,
(SELECT (tblLevelGameDDL.GameDropdownName) AS CurrentlyIn from tblLevel INNER JOIN tblLevelGameDDL ON tblLevel.CurrentlyIn = tblLevelGameDDL.GameDropdownID WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevel.Active = 1) as currentlevel		
 from tblLevelPerformance WHERE level_achieved = 0;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLevelperformance_PopupShowed
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLevelperformance_PopupShowed`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLevelperformance_PopupShowed`()
BEGIN

Select * from tblLevelPerformance;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLevels`()
BEGIN

SELECT  tblLevel.Level_ID,
				Level_Name,
				tblRoles.Role_Name,
			  tblRoles.Role_ID,
				tblLevel.Active,
				tblLevel.Level_Position,
				BaseHours,
				tblLevel.Points
FROM tblLevel
INNER JOIN tblRoles ON 
	tblLevel.Role_ID = tblRoles.Role_ID
WHERE tblRoles.Active = 1 
ORDER BY tblLevel.Level_Position ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLevelsByRole
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLevelsByRole`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLevelsByRole`(IN `p_RoleID` int)
BEGIN



SELECT  tblLevel.Level_ID,

				Level_Name,

				tblRoles.Role_Name,

			  tblRoles.Role_ID,

				tblLevel.Active,

				CONCAT('Level ',CONVERT(tblLevel.Level_Position , CHARACTER(10)))    as Level_Position,
         tbllevel.Level_Position AS lvlPosition,

				tblLevel.Level_Position AS Level_PositionID,

				BaseHours,

ImageThumbnail,
ImageName,

				tblLevel.Points,

				tblLevel.Role_ID,

CONCAT(Level_Name,' | ','Level ',CONVERT(tblLevel.Level_Position , CHARACTER(10)))    as LevelName,

	tblLevel.CurrentlyIn,

	tblLevel.Reach,

	tblLevel.Game

FROM tblLevel

INNER JOIN tblRoles ON 

	tblLevel.Role_ID = tblRoles.Role_ID



WHERE tblRoles.Active = 1 and tblLevel.Role_ID=p_RoleID

ORDER BY tblLevel.Level_Position ASC;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetLifeLines
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetLifeLines`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetLifeLines`()
BEGIN

Select * From tblLifeLines;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetManualAssignedAwards
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetManualAssignedAwards`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetManualAssignedAwards`(p_UserID INT)
BEGIN

	SELECT tblUserAwards.award_id,
tblUserAwards.userAwardsId,

 tblUserAwards.achieved_scores,tblUserAwards.target_scores,

				tblUserAwards.awarded_date,tblUserAwards.awardedBy,tblUserAwards.manual,

				tblUserAwards.userAwardsId,tblUserAwards.user_id,

				tblAwards.Award_Name,

				tblAwards.Award_ID,

				CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName,

				tblUserAwards.popup_showed,

				tblUserAwards.awarded_date,

				(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblUserAwards.award_id) as Award_Thumbnail

	FROM tblUserAwards 

	INNER JOIN tblAwards ON 

	tblUserAwards.award_id = tblAwards.Award_ID

	INNER JOIN tblUser ON

	tblUserAwards.user_id = tblUser.UserID

	WHERE tblUserAwards.manual = 1 AND tblUserAwards.user_id = p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetMapDetail
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetMapDetail`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetMapDetail`()
BEGIN	



/*SELECT *,

(SELECT Level_Position from tblLevel WHERE tblMap.level_ID = tblLevel.Level_ID) as LevelPosition

 FROM tblMap;*/



SELECT * FROM tblLevel where Active = 1;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetMatch
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetMatch`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetMatch`(p_Where VARCHAR(10000))
BEGIN

DECLARE p_Select VARCHAR(2000);
DECLARE p_FinalQuery varchar(8000);

SET p_Select = 
'SELECT
	MatchID,
	MatchName,
	PointsForCompletation,
	MaxPlaysPerDay,
	NoOfDataSet,
	NoOfRounds,
	CreatedDate,
	MatchImage,
	MatchImageThumbnail,
	KPI_ID
FROM 
	tblmatch ';

SET @p_FinalQuery = CONCAT(p_Select,p_Where);
PREPARE result from @p_FinalQuery;
EXECUTE result;
DEALLOCATE PREPARE result;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetMatchDataSet_Player
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetMatchDataSet_Player`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetMatchDataSet_Player`(p_MatchID int, p_LevelID int, p_RoleID int, p_RoundNumber int, p_NoDataSets int, p_DataElements int)
BEGIN	

IF(p_DataElements = 2)
THEN
	SELECT 
		tblmatchdatasets.DataSetID,
		SPLIT_STR(DataSetElementsData, '|', 1) as DataElement1,
		'' as DataElement2,
		'' as DataElement3,
		DataSetElementsData,
		SiteID,   
		MatchID,
		tblmatchdatasetlevels.LevelID,
		(select NoOfDataSet from tblMatch Where MatchID = p_MatchID) as NoDataElements,
		(select MaxPlaysPerDay from tblMatch Where MatchID = p_MatchID) as LimitGame,
		(select NoOfDataSets from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as NoDataSets,
		(select TimePerRound from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as TimePerRound,
		(select PointsPerRound from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as PointsPerRound,
		DataSetImage,
		DataSetImageThumbnail
	FROM 
		tblmatchdatasets
	INNER JOIN tblmatchdatasetlevels 
	ON tblmatchdatasets.DataSetID = tblmatchdatasetlevels.DataSetID
	WHERE 
		MatchID = p_MatchID AND 
		tblmatchdatasetlevels.RoleID = p_RoleID AND
		tblmatchdatasetlevels.LevelID = p_LevelID
	ORDER BY RAND()
	LIMIT p_NoDataSets;
END IF;

IF(p_DataElements = 3)
THEN
	SELECT 
		tblmatchdatasets.DataSetID,
		SPLIT_STR(DataSetElementsData, '|', 1) as DataElement1,
		SPLIT_STR(DataSetElementsData, '|', 2) as DataElement2,
		'' as DataElement3,
		DataSetElementsData,
		SiteID,   
		MatchID,
		tblmatchdatasetlevels.LevelID,
		(select NoOfDataSet from tblMatch Where MatchID = p_MatchID) as NoDataElements,
		(select MaxPlaysPerDay from tblMatch Where MatchID = p_MatchID) as LimitGame,
		(select NoOfDataSets from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as NoDataSets,
		(select TimePerRound from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as TimePerRound,
		(select PointsPerRound from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as PointsPerRound,
		DataSetImage,
		DataSetImageThumbnail
	FROM 
		tblmatchdatasets
	INNER JOIN tblmatchdatasetlevels 
	ON tblmatchdatasets.DataSetID = tblmatchdatasetlevels.DataSetID
	WHERE 
		MatchID = p_MatchID AND 
		tblmatchdatasetlevels.RoleID = p_RoleID AND
		tblmatchdatasetlevels.LevelID = p_LevelID
	ORDER BY RAND()
	LIMIT p_NoDataSets;
END IF;

IF(p_DataElements = 4)
THEN
	SELECT 
		tblmatchdatasets.DataSetID,
		SPLIT_STR(DataSetElementsData, '|', 1) as DataElement1,
		SPLIT_STR(DataSetElementsData, '|', 2) as DataElement2,
		SPLIT_STR(DataSetElementsData, '|', 3) as DataElement3,
		DataSetElementsData,
		SiteID,   
		MatchID,
		tblmatchdatasetlevels.LevelID,
		(select NoOfDataSet from tblMatch Where MatchID = p_MatchID) as NoDataElements,
		(select MaxPlaysPerDay from tblMatch Where MatchID = p_MatchID) as LimitGame,
		(select NoOfDataSets from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as NoDataSets,
		(select TimePerRound from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as TimePerRound,
		(select PointsPerRound from tblround Where MatchID = p_MatchID LIMIT p_RoundNumber, 1) as PointsPerRound,
		DataSetImage,
		DataSetImageThumbnail
	FROM 
		tblmatchdatasets
	INNER JOIN tblmatchdatasetlevels 
	ON tblmatchdatasets.DataSetID = tblmatchdatasetlevels.DataSetID
	WHERE 
		MatchID = p_MatchID AND 
		tblmatchdatasetlevels.RoleID = p_RoleID AND
		tblmatchdatasetlevels.LevelID = p_LevelID
	ORDER BY RAND()
	LIMIT p_NoDataSets;
END IF;

Select * from tblusermatchpoints;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetMatchPlayLog
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetMatchPlayLog`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetMatchPlayLog`()
BEGIN

Select * from tblMatchPlayLog;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetMatch_Player
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetMatch_Player`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetMatch_Player`()
BEGIN
	
SELECT  
	SUM(PointsAchieved) AS MatchPoints, 
	tblmatch.MatchID, 
	tblmatch.MatchName,
	tblmatch.MatchImageThumbnail,
	tblUser.UserID, 
	CONCAT(tblUser.U_FirstName,	' ', tblUser.U_LastName) AS FullName
FROM tblusermatchpoints
Right JOIN tblmatch 
ON tblusermatchpoints.MatchID = tblmatch.MatchID
Left JOIN tblUser 
ON tblusermatchpoints.UserID = tblUser.UserID
GROUP BY 
	MatchID,
	UserID;

SELECT * FROM tblusermatchpoints;

SELECT * FROM tblUserMatchPointsTemperory
INNER JOIN tblmatchdatasets 
ON tblUserMatchPointsTemperory.MatchID = tblmatchdatasets.MatchID;

SELECT  
	SUM(PointsAchieved) AS MatchPoints, 
	tblmatch.MatchID, 
	tblmatch.MatchName,
	tblmatch.MatchImageThumbnail,
	tblUser.UserID, 
	tblmatch.MaxPlaysPerDay,
	tblmatch.KPI_ID,
	CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName
FROM 
	tblusermatchpoints
Right JOIN tblmatch 
ON tblusermatchpoints.MatchID = tblmatch.MatchID
Left JOIN tblUser 
ON tblusermatchpoints.UserID = tblUser.UserID
GROUP BY 
	MatchID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetMessages
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetMessages`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetMessages`()
BEGIN

	

SELECT ID,From_UserID,To_UserID,Message_Subject,Message_Text,IsRead,IsReply,Sent_Date,Active,RepliedMessageID,

(SELECT CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) from tblUser WHERE tblUser.UserID = tblMessages.From_UserID)  as FullName,

(SELECT tblUserImages.Player_Thumbnail FROM tblUserImages WHERE tblUserImages.UserID = tblMessages.From_UserID AND tblUserImages.U_Current = 1) AS Player_Thumbnail

 from tblMessages

ORDER BY tblMessages.Sent_Date DESC;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetPlayerLevelPercent
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetPlayerLevelPercent`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetPlayerLevelPercent`(p_UserID INT)
BEGIN

	SELECT  tblLevelPerformance.levelPerformanceId, tblLevelPerformance.current_level,tblLevel.Level_Position,tblLevelPerformance.last_level,tblLevelPerformance.next_level,

				/*(SELECT levels.popup_showed FROM tblLevelPerformance levels 

				WHERE levels.current_level = tblLevelPerformance.last_level AND levels.user_id = p_UserID AND levels.level_achieved = 1) AS popup_showed,*/

				tblLevelPerformance.popup_showed,

				(SELECT lvl.Points FROM tblLevel lvl 

				WHERE lvl.Level_ID = tblLevelPerformance.current_level AND lvl.Active = 1) AS Bonus,

				(SELECT leve.Level_Name  FROM tblLevel leve WHERE leve.Level_ID = tblLevelPerformance.current_level) AS CurrentLevelName,

					IFNULL(((achieved_scores/target_scores) * 100),0) AS Percentage					

	FROM tblLevelPerformance

	INNER JOIN tblLevel ON

	tblLevelPerformance.current_level = tblLevel.Level_ID

	WHERE tblLevelPerformance.user_id = p_UserID AND tblLevelPerformance.level_achieved = 0;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetPoints
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetPoints`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetPoints`(p_UserID int)
BEGIN

Select U_Points from tblUser

Where UserId = p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetPostByID
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetPostByID`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetPostByID`(`p_PostID` int)
BEGIN

Select * from tblPosts where PostID = p_PostID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetPostDetails
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetPostDetails`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetPostDetails`(p_PostID int)
BEGIN

	Select *,

(Select U_FirstName from tblUser where tblUser.UserID = RepliedBy) as RepliedByName,

(Select count(*) from tblPostRepliedLikes Where PostID = p_PostID and tblPostRepliedLikes.LikeID = ReplyID) as Likes from tblPostReplies 

Where PostID = p_PostID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetPostTypes
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetPostTypes`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetPostTypes`()
BEGIN

	Select * from tblPostTypes;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetPosts
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetPosts`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetPosts`(p_Where VARCHAR(10000))
BEGIN



DECLARE p_Select VARCHAR(2000); DECLARE p_Select2 VARCHAR(2000);

DECLARE p_FinalQuery varchar(8000);



SET p_Select = '



SELECT S.* From (

Select @rownum:=@rownum+1 rownum , P.PostID as ID, P.PostTitle as Topic, P.RoleID , P.CreateDate, P.CreatedBy, P.PostMessage

,(Select COUNT(*) FROM tblPostReplies WHERE tblPostReplies.PostID = P.PostID ) as Replies

,(Select COUNT(*) FROM tblPostRepliedLikes WHERE tblPostRepliedLikes.PostID = P.PostID ) as Likes

,(SELECT B.U_Name from tblPostReplies A, tblUser B WHERE A.RepliedBy = B.UserID and A.ReplyDate = (SELECT Max(ReplyDate) from tblPostReplies where tblPostReplies.PostID = P.PostID)) as LastReply

,IFNULL(TIMESTAMPDIFF (MINUTE,(SELECT Max(ReplyDate) as Maz from tblPostReplies where tblPostReplies.PostID = P.PostID),CURRENT_TIMESTAMP()),0) as LatestDate 

from tblPosts P, (SELECT @rownum:=0) R ) S  

  '; 



SET @p_Select2 = '

SELECT COUNT(*) as TotalRecords From (

Select @rownum:=@rownum+1 rownum , P.PostID as ID, P.PostTitle as Topic

,(Select COUNT(*) FROM tblPostReplies WHERE tblPostReplies.PostID = P.PostID ) as Replies

,(Select COUNT(*) FROM tblPostRepliedLikes WHERE tblPostRepliedLikes.PostID = P.PostID ) as Likes

,(SELECT B.U_Name from tblPostReplies A, tblUser B WHERE A.RepliedBy = B.UserID and A.ReplyDate = (SELECT Max(ReplyDate) from tblPostReplies where tblPostReplies.PostID = P.PostID)) as LastReply

,IFNULL(TIMESTAMPDIFF (MINUTE,(SELECT Max(ReplyDate) as Maz from tblPostReplies where tblPostReplies.PostID = P.PostID),CURRENT_TIMESTAMP()),0) as LatestDate 

from tblPosts P, (SELECT @rownum:=0) R ) S 

';



SET @p_FinalQuery = CONCAT(p_Select,p_Where);



PREPARE result from @p_FinalQuery; PREPARE result2 from @p_Select2;

EXECUTE result; EXECUTE result2;

DEALLOCATE PREPARE result; DEALLOCATE PREPARE result2;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetQuestionLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetQuestionLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetQuestionLevels`(p_QuestionID INT, p_RoleID INT)
BEGIN

	SELECT QuestionID,RoleID,LevelID FROM tblQuestionLevels WHERE QuestionID = p_QuestionID AND RoleID = p_RoleID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetQuiz
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetQuiz`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetQuiz`(p_Where VARCHAR(10000))
BEGIN	

DECLARE p_Select VARCHAR(2000);
DECLARE p_FinalQuery varchar(8000);

SET p_Select = 
' SELECT 
			QuizID,
			QuizName ,
			NoOfQuestions,
			TimePerQuestion,
			TimesPlayablePerDay,
			TimeBeforePointsDeduction,
			PointsPerQuestion,
			CreatedDate,
			QuizImage,
			QuizImageThumbnail,
			KPI_ID
	  FROM tblQuiz ';

SET @p_FinalQuery = CONCAT(p_Select,p_Where);
PREPARE result from @p_FinalQuery;
EXECUTE result;
DEALLOCATE PREPARE result;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetQuizPlayLog
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetQuizPlayLog`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetQuizPlayLog`()
BEGIN

Select * from tblQuizPlayLog;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetQuizQuestion_Player
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetQuizQuestion_Player`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetQuizQuestion_Player`(p_QuizID int, p_RoleID int, p_LevelID int)
BEGIN	
SELECT 
   tblQuizQuestions.QuestionID,
   QuestionText ,
   ShortQuestion,
   QuestionExplanation,
   Answer1,
   Answer2,
   Answer3,
   Answer4,
   CorrectAnswer,
   Category,
   SiteID,   
   QuizID,
tblQuestionLevels.LevelID,
(select TimesPlayablePerDay from tblQuiz Where QuizID=p_QuizID) as LimitGame,
(select TimeBeforePointsDeduction from tblQuiz Where QuizID=p_QuizID) as DeductionTime,
(select NoOfQuestions from tblQuiz Where QuizID=p_QuizID) as NoQuestions,
(select TimePerQuestion from tblQuiz Where QuizID=p_QuizID) as timeQuestion,

(select PointsPerQuestion from tblQuiz Where QuizID=p_QuizID) as QuestionPoints,
   QuestionImage,
   QuestionImageThumbnail
   FROM tblQuizQuestions
  INNER JOIN tblQuestionLevels ON tblQuizQuestions.QuestionID = tblQuestionLevels.QuestionID

  WHERE QuizID = p_QuizID AND tblQuestionLevels.RoleID = p_RoleID ;

Select * from tblUserQuizPoints;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetQuizQuestions
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetQuizQuestions`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetQuizQuestions`(p_Where VARCHAR(10000),p_Status int)
BEGIN





DECLARE p_Select VARCHAR(2000);

DECLARE p_FinalQuery varchar(8000);

if(p_Status =1)

then

SET p_Select = 

 ' SELECT 

			tblQuizQuestions.QuestionID,

			QuestionText ,

      ShortQuestion,

			QuestionExplanation,

			Answer1,

			Answer2,

			Answer3,

			Answer4,

			CorrectAnswer,

			Category,

			SiteID,			

			QuizID,

			QuestionImage,

			QuestionImageThumbnail

	  FROM tblQuizQuestions

		INNER JOIN tblQuestionLevels ON tblQuizQuestions.QuestionID = tblQuestionLevels.QuestionID

 ';



SET @p_FinalQuery = CONCAT(p_Select,p_Where);

PREPARE result from @p_FinalQuery;

EXECUTE result;

DEALLOCATE PREPARE result;

END IF;

IF(p_Status =0)

then

SET p_Select = 

 ' SELECT 

			tblQuizQuestions.QuestionID,

			QuestionText ,

      ShortQuestion,

			QuestionExplanation,

			Answer1,

			Answer2,

			Answer3,

			Answer4,

			CorrectAnswer,

			Category,

			SiteID,			

			QuizID,

			QuestionImage,

			QuestionImageThumbnail

	  FROM tblQuizQuestions

 ';



SET @p_FinalQuery = CONCAT(p_Select,p_Where);

PREPARE result from @p_FinalQuery;

EXECUTE result;

DEALLOCATE PREPARE result;





END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetQuiz_Player
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetQuiz_Player`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetQuiz_Player`(p_RoleID int,p_LevelID int)
BEGIN
	
SELECT  SUM(PointsAchieved) AS QuizPoints, tblQuiz.QuizID, tblQuiz.QuizName,tblQuiz.QuizImageThumbnail,tblUser.UserID, 
CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName
FROM tblUserQuizPoints
Right JOIN tblQuiz ON tblUserQuizPoints.QuizID = tblQuiz.QuizID
Left JOIN tblUser ON tblUserQuizPoints.UserID = tblUser.UserID
GROUP BY QuizID,UserID;

Select * from tblUserQuizPoints ;

select * from tblUserQuizPointsTemperory
inner join tblQuizQuestions on tblUserQuizPointsTemperory.QuestionID= tblQuizQuestions.QuestionID
ORDER BY tblUserQuizPointsTemperory.UserQuizPointsID ASC;


SELECT  SUM(PointsAchieved) AS QuizPoints, tblQuiz.QuizID, tblQuiz.QuizName,tblQuiz.QuizImageThumbnail,tblUser.UserID, tblQuiz.TimesPlayablePerDay, tblQuiz.KPI_ID,

CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName
FROM tblUserQuizPoints
Right JOIN tblQuiz ON tblUserQuizPoints.QuizID = tblQuiz.QuizID
Left JOIN tblUser ON tblUserQuizPoints.UserID = tblUser.UserID
INNER JOIN tblquizlevels ON tblquiz.QuizID = tblquizlevels.QuizID
WHERE tblquizlevels.RoleID = p_RoleID AND tblquizlevels.LevelID =p_LevelID
GROUP BY QuizID;

Select tblquiz.QuizID
FROM tblquiz INNER JOIN tbltarget
ON tblquiz.KPI_ID = tbltarget.KPI_ID
WHERE tbltarget.Level_ID = p_LevelID AND tbltarget.Role_ID= p_RoleID ;

Select Score, tblscores.User_ID, tblscores.Type_ID
from tblScores
Where U_Type ='KPI' AND LevelID = p_LevelID ;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetRedeemPoints
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetRedeemPoints`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetRedeemPoints`()
BEGIN

select * from tblRedeem;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetRepliedLikeStatus
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetRepliedLikeStatus`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetRepliedLikeStatus`(`p_LikeID` int,`P_LikedBy` int,`p_PostID` int)
BEGIN

	Select count(*) as TotalLikes from tblPostRepliedLikes

  Where LikeID = p_LikeID and LikedBy = p_LikedBy and PostID = p_PostID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetReward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetReward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetReward`()
BEGIN

Select *,
(SELECT Reward_Image FROM tblRewardImages WHERE Current_Image = 1 AND Active = 1 AND tblRewardImages.Reward_ID = tblRewards.Reward_ID) as Reward_Image,
(SELECT Reward_Thumbnail FROM tblRewardImages WHERE Current_Image = 1 AND Active = 1 AND tblRewardImages.Reward_ID = tblRewards.Reward_ID) as Reward_Thumbnail
 from tblRewards  ORDER BY tblRewards.Reward_Cost;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetRewardImages
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetRewardImages`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetRewardImages`()
BEGIN

	

SELECT ID, tblRewardImages.Reward_ID, Reward_Image, Reward_Thumbnail, Uploaded_Date, Current_Image

FROM tblRewardImages

INNER JOIN tblRewards ON

tblRewards.Reward_ID = tblRewardImages.Reward_ID

WHERE tblRewards.Active = 1;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetRewardUser
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetRewardUser`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetRewardUser`(p_UserID INT)
BEGIN
SELECT tblRedeem.Reward_ID,
 			tblRedeem.Redeem_Date,tblRedeem.User_ID,

				tblRewards.Reward_Name,

				tblRewards.Reward_ID,

				CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName,

				(SELECT Reward_Image FROM tblRewardImages WHERE Current_Image = 1 AND Active = 1 AND tblRewardImages.Reward_ID = tblRedeem.Reward_ID) as Reward_Thumbnail

	FROM tblRedeem 

	INNER JOIN tblRewards ON 

	tblRedeem.Reward_ID = tblRewards.Reward_ID

	INNER JOIN tblUser ON

	tblRedeem.User_ID = tblUser.UserID

	WHERE tblRedeem.User_ID = p_UserID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetRoles
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetRoles`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetRoles`()
BEGIN



Select * from tblRoles;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetRound
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetRound`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetRound`(p_Where VARCHAR(10000))
BEGIN	

DECLARE p_Select VARCHAR(2000);
DECLARE p_FinalQuery varchar(8000);

SET p_Select = 
'SELECT 
	RoundID,
    MatchID,
	RoundNumber,
    RoundName,
	NoOfDataSets,
	TimePerRound,
	PointsPerRound,
	CreatedDate,
	ShowHint
FROM tblRound';

SET @p_FinalQuery = CONCAT(p_Select,p_Where);
PREPARE result from @p_FinalQuery;
EXECUTE result;
DEALLOCATE PREPARE result;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetSecurityQuestions
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetSecurityQuestions`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetSecurityQuestions`()
BEGIN



Select * from tblSecurityQuestions;	



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetSites_ddl
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetSites_ddl`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetSites_ddl`()
BEGIN

	

SELECT site_id, concat(site_name," | ", site_type ) as site_name, site_type 

from tblSite 

WHERE Active = 1

order by site_name;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetTarget
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetTarget`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetTarget`()
BEGIN

SELECT Target_ID,Target_Value,tblTarget.KPI_ID,tblTarget.Level_ID,tblTarget.Role_ID,tblTarget.Active,BaseHours,tblLevel.Points, tblLevel.Level_Position, tblTarget.Points as TPoints

				,tblKPI.KPI_name,tblLevel.Level_Name,tblRoles.Role_Name,tblTarget.Target_Desc,Level_Name,CurrentlyIn,Reach,Game,ImageThumbnail,ImageName

FROM tblTarget

INNER JOIN tblKPI ON

tblTarget.KPI_ID = tblKPI.KPI_ID

INNER JOIN tblLevel ON

tblTarget.Level_ID = tblLevel.Level_ID

INNER JOIN tblRoles ON

tblTarget.Role_ID = tblRoles.Role_ID

WHERE tblKPI.Active = 1 AND tblLevel.Active = 1 AND tblRoles.Active = 1 ORDER BY tblKPI.KPI_name;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetTargetDescription
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetTargetDescription`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetTargetDescription`()
BEGIN



SELECT (SELECT KPI_name from tblKPI where tblKPI.KPI_ID = tblTarget.KPI_ID) as KPIName,

(SELECT KPI_Descp from tblKPI where tblKPI.KPI_ID = tblTarget.KPI_ID) as KPIDesc,
(SELECT TipsDESC from tblKPI where tblKPI.KPI_ID = tblTarget.KPI_ID) as TipsDesc,
(SELECT TipsLINK from tblKPI where tblKPI.KPI_ID = tblTarget.KPI_ID) as TipsLink,	

				Target_ID,

				Target_Desc

 from tblTarget;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetTargetValue
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetTargetValue`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetTargetValue`(p_LevelID int,p_RoleID int)
BEGIN

Select Sum(Target_Value) from tblTarget

where Level_ID=p_LevelID AND Role_ID =p_RoleID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetTotalPlayerScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetTotalPlayerScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetTotalPlayerScore`()
BEGIN



	SELECT Target_Value,

				 tblTarget.KPI_ID,

				 tblTarget.Role_ID,

				 tblTarget.Level_ID FROM tblTarget

where tblTarget.Level_ID  = 1;







END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUser
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUser`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUser`(p_Where VARCHAR(10000))
BEGIN

DECLARE p_Select VARCHAR(2000);

DECLARE p_FinalQuery varchar(8000);



SET p_Select = 

' SELECT UserID,U_FirstName ,U_Points,	

(SELECT CONCAT(tblUser.U_FirstName,'' '',tblUser.U_LastName)) as FullName,

	U_Name,

	U_LastName ,

	U_NickName,

	Display_Name,

	tblUser.Active,

    tblRoles.Role_Name,

		tblUser.U_RolesID,

tblUser.U_SysRole,

tblUser.U_Email,

tblUser.U_SiteID,

tblUser.ManagerID,(Select Worked_Hour from tblLevelPerformance 

Where user_id = tblUser.UserID and level_achieved =0) as WorkedHour,

(Select current_level from tblLevelPerformance 

Where user_id = tblUser.UserID and level_achieved =0) as LevelID,

(SELECT Player_Thumbnail FROM tblUserImages WHERE UserID = tblUser.UserID AND U_Current = 1) AS Player_Thumbnail,

(Select IFNULL(tblLevel.Level_Position,0) from tblLevelPerformance 

INNER JOIN tblLevel ON tblLevelPerformance.current_level = tblLevel.Level_ID

Where user_id = tblUser.UserID and level_achieved =0) AS Level

FROM tblUser

INNER JOIN tblRoles ON

tblUser.U_RolesID = tblRoles.Role_ID ';



/*SET @p_FinalQuery = CONCAT(p_Select,p_Where,' AND tblRoles.Active = 1 AND tblUser.U_SysRole <> ''Admin'' ORDER BY FullName');*/

SET @p_FinalQuery = CONCAT(p_Select,p_Where,' AND tblRoles.Active = 1  ORDER BY FullName');

PREPARE result from @p_FinalQuery;

EXECUTE result;

DEALLOCATE PREPARE result;





END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUserAwardScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUserAwardScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUserAwardScore`(p_UserID int)
BEGIN



	Select tblUserAwards.award_id,

(SELECT tblAwards.Award_Name FROM tblAwards where Award_ID = tblUserAwards.award_id) as AwardName,

tblUserAwards.target_scores,

tblUserAwards.achieved_scores,

(select (achieved_scores * 100 / target_scores)) as Percentage,

(Select 'yes' from tblUserAwardAchieved where  tblUserAwards.user_id=p_UserID) as achieved

from tblUserAwards

/*LEFT OUTER JOIN tblLevelPerformance on v_UserLevelScores1.Level_ID = tblLevelPerformance.current_level

LEFT OUTER JOIN tblUserTargetAchieved on v_UserLevelScores1.Target_ID = tblUserTargetAchieved.Target_ID */

where /*tblUserAwards.award_id=p_AwardID 

and*/ tblUserAwards.user_id=p_UserID and manual = 0



 /*AND tblLevelPerformance.level_achieved = 0 

 AND tblUserTargetAchieved.Target_Achieved = 0

 AND tblLevelPerformance.user_id = p_UserID

Award_ID=(SELECT award_id FROM tblUserAwards WHERE user_id = p_UserID and manual=0 LIMIT 1) and*/

;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUserInfoByEmail
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUserInfoByEmail`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUserInfoByEmail`(IN `p_Email` varchar(50))
BEGIN

	SELECT tblUser.UserID,tblUser.U_Name 

	FROM tblUser 

	WHERE tblUser.U_Email = p_Email AND tblUser.Active = 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUserProgressDetail
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUserProgressDetail`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUserProgressDetail`(p_UserID INT)
BEGIN



	SELECT  tblLevelPerformance.user_id,

					tblTarget.Target_ID,

					SUM(tblScores.Score),

					tblTarget.Target_Value,					

					tblLevelPerformance.target_scores,

					(tblTarget.Target_Value - SUM(tblScores.Score)) AS RemainingScore,

					IFNULL(CEIL ((SUM(tblScores.Score)/Target_Value)*100),0) as current_percentage,

					tblTarget.KPI_ID,

					tblLevelPerformance.level_achieved,

					(SELECT KPI_name from tblKPI where tblKPI.KPI_ID = tblTarget.KPI_ID) as KPIName,	

					(SELECT DATE_ADD(Level_date,INTERVAL BaseHours HOUR) from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1) as TargetDate,	

					(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.last_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1) as previouslevel_name,			

					(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1) as currentlevel_name,	

					(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.next_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1 ) as nextlevel_name,							

					(SELECT CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) FROM tblUser WHERE tblUser.UserID = p_UserID) AS PlayerName,

				  tblTarget.Level_ID

FROM tblScores 

INNER JOIN tblTarget ON 

tblScores.Type_ID = tblTarget.KPI_ID AND tblScores.U_Type = 'KPI' and tblScores.User_ID = p_UserID

  INNER JOIN tblLevelPerformance on tblTarget.Level_ID = tblLevelPerformance.current_level

where tblLevelPerformance.user_id = p_UserID AND tblLevelPerformance.level_achieved = 0

GROUP BY tblTarget.KPI_ID ;





END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUserScoreAdmin
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUserScoreAdmin`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUserScoreAdmin`(p_UserID int,p_LevelID int)
BEGIN



IF (EXISTS(SELECT * FROM tbltarget WHERE tbltarget.Level_ID = p_LevelID))
	THEN

Select v_UserLevelScores1.*,(CASE WHEN v_UserLevelScores1.current_percentage < 80 THEN 'red' WHEN v_UserLevelScores1.current_percentage > 80 AND v_UserLevelScores1.current_percentage <90 THEN 'Yellow' ELSE 'Green' END) AS PlayerStatus 

,tblLevel.Points as target_scores

,(SELECT DATE_ADD(Level_date,INTERVAL BaseHours HOUR) from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1) as TargetDate

,(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.last_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1) as previouslevel_name,	

(SELECT (tblLevelGameDDL.GameDropdownName) AS Reach from tblLevel INNER JOIN tblLevelGameDDL ON tblLevel.Reach = tblLevelGameDDL.GameDropdownID WHERE tblLevel.Level_ID = p_LevelID and tblLevel.Active = 1) as Reach,	

(SELECT (tblLevelGameDDL.GameDropdownName) AS CurrentlyIn from tblLevel INNER JOIN tblLevelGameDDL ON tblLevel.CurrentlyIn = tblLevelGameDDL.GameDropdownID WHERE tblLevel.Level_ID = p_LevelID and tblLevel.Active = 1) as CurrentlyIn,		

	(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.current_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1) as currentlevel_name,	

	(SELECT tblLevel.Level_Name from tblLevel WHERE tblLevel.Level_ID = tblLevelPerformance.next_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1 ) as nextlevel_name

,(select (IFNULL(sum(current_percentage),0)) / Count(*) from v_UserLevelScores where Level_ID=v_UserLevelScores1.Level_ID and UserID=v_UserLevelScores1.UserID) as Performance 



,tblLevel.Points  as Bonus,
"0" as CheckNoProgress /*(SELECT tblLevel.Points from tblLevel where tblLevel.Level_ID = tblLevelPerformance.next_level and tblLevelPerformance.user_id = p_UserID and tblLevel.Active = 1)*/

from v_UserLevelScores as  v_UserLevelScores1

LEFT OUTER JOIN tblLevelPerformance on v_UserLevelScores1.Level_ID = tblLevelPerformance.current_level

LEFT OUTER JOIN tblLevel on v_UserLevelScores1.Level_ID = tblLevel.Level_ID

where v_UserLevelScores1.Level_ID=p_LevelID and v_UserLevelScores1.UserID=p_UserID AND tblLevelPerformance.level_achieved = 0  AND tblLevelPerformance.user_id = p_UserID ORDER BY v_UserLevelScores1.KPI_name;


	ELSE

Select tbllevel.Level_Name,tbllevel.Points  as Bonus ,"1" as CheckNoProgress,tbllevel.BaseHours,tbllevel.Level_Position,tblroles.Role_Name,
(Select tbluser.U_Points from tbluser where tbluser.UserID = p_UserID) AS Points,
(Select CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) from tbluser WHERE tbluser.UserID = p_UserID) AS PlayerName,
(SELECT (tblLevelGameDDL.GameDropdownName) AS Reach from tblLevel INNER JOIN tblLevelGameDDL ON tblLevel.Reach = tblLevelGameDDL.GameDropdownID WHERE tblLevel.Level_ID = p_LevelID and tblLevel.Active = 1) as Reach,	

(SELECT (tblLevelGameDDL.GameDropdownName) AS CurrentlyIn from tblLevel INNER JOIN tblLevelGameDDL ON tblLevel.CurrentlyIn = tblLevelGameDDL.GameDropdownID WHERE tblLevel.Level_ID = p_LevelID and tblLevel.Active = 1) as CurrentlyIn

from tbllevel INNER JOIN tblroles ON tbllevel.Role_ID =tblroles.Role_ID
Where tbllevel.Level_ID = p_LevelID;

	END IF;














	

/*

	SELECT tblLevelPerformance.user_id,

					tblScores.Score,

					tblTarget.Target_Value,

					tblLevelPerformance.target_scores,

					CEIL (((Score/Target_Value)*100)) as current_percentage,

					tblTarget.KPI_ID,

					(SELECT KPI_name from tblKPI where tblKPI.KPI_ID = tblTarget.KPI_ID) as KPIName,				

				  (SELECT tblLevel.Level_Name from tblLevel where tblLevelPerformance.current_level = tblLevel.Level_ID) as LevelName,

					tblTarget.Level_ID

 FROM tblScores INNER JOIN tblTarget ON tblScores.Type_ID = tblTarget.KPI_ID AND tblScores.U_Type = 'KPI' and tblScores.User_ID = p_UserID

  INNER JOIN tblLevelPerformance on tblTarget.Level_ID = tblLevelPerformance.current_level

where tblLevelPerformance.user_id = p_UserID;

*/







END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUserTargetScoreAdmin
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUserTargetScoreAdmin`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUserTargetScoreAdmin`(p_UserID int,p_LevelID int)
BEGIN



Select v_UserLevelScores1.*,

(select (IFNULL(sum(current_percentage),0)) / Count(*) from v_UserLevelScores where Level_ID=v_UserLevelScores1.Level_ID and UserID=v_UserLevelScores1.UserID) as Performance ,

(Select 'yes' from tblUserTargetAchieved where Target_ID=v_UserLevelScores1.Target_ID and UserID=p_UserID) as achieved,CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName) AS FullName 

,tblRoles.Role_Name,tblLevel.Level_Name,tblLevel.Level_Position,tblUser.U_Name



from v_UserLevelScores as  v_UserLevelScores1

LEFT JOIN tblUser ON v_UserLevelScores1.UserID = tblUser.UserID

LEFT JOIN tblRoles ON v_UserLevelScores1.Role_ID = tblRoles.Role_ID

LEFT JOIN tblLevel ON v_UserLevelScores1.Level_ID = tblLevel.Level_ID

where v_UserLevelScores1.Level_ID=p_LevelID 

and v_UserLevelScores1.UserID=p_UserID





 /*AND tblLevelPerformance.level_achieved = 0 

 AND tblUserTargetAchieved.Target_Achieved = 0

 AND tblLevelPerformance.user_id = p_UserID*/

;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUsersByRole
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUsersByRole`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUsersByRole`(p_RoleID int)
BEGIN

	

SELECT UserID,

(SELECT CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName)) as FullName

 from tblUser 

where tblUser.U_RolesID = p_RoleID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUsersInfo
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUsersInfo`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUsersInfo`(p_Name Varchar(50),p_Password VARCHAR(50))
BEGIN







Select *,(SELECT U_Email FROM tblUser M WHERE M.UserID = tblUser.ManagerID) AS ManagerEmail,

				

				tblRoles.Role_Name as RoleName,(SELECT tblSite.site_name FROM tblSite WHERE tblSite.site_id = tblUser.U_SiteID) AS SiteName

from tblUser INNER JOIN

     tblRoles ON tblUser.U_RolesID = tblRoles.Role_ID 



WHERE U_Name =p_Name

and BINARY U_password =p_Password and tblUser.Active =1;





/*and tblSite.site_id=p_SiteId and U_SiteID = p_SiteID*/



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUsersInfoTemp
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUsersInfoTemp`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUsersInfoTemp`(p_Name Varchar(50))
BEGIN

if((SELECT tbluser.U_SysRole from tbluser where tblUser.U_Name =p_Name) = 'Player' )
THEN


Select
tblUser.UserID,tblUser.U_Name,tblUser.U_SysRole,tblUser.U_RolesID,tblUser.U_Password,tblUser.U_FirstName,tblUser.U_LastName,tblUser.U_NickName,tblUser.Active,tblUser.U_Email,tblUser.U_SiteID
,tblUser.U_EmpNo,tblUser.ManagerID,tblUser.Display_Name,tblUser.U_Points,tblUser.ActiveUpdatedDate,M.U_Email AS ManagerEmail,tblRoles.Role_Name as RoleName,tblSite.site_name AS SiteName,
tblLevelPerformance.current_level,tblLevel.Level_Position,tblLevel.Level_Name,tbllevel.Points,tbllevel.ImageName



from tblUser INNER JOIN

tblRoles ON tblUser.U_RolesID = tblRoles.Role_ID 

INNER JOIN

tblSite ON tblUser.U_SiteID = tblSite.site_id

LEFT OUTER JOIN

tblUser M ON  tblUser.ManagerID= M.UserID

INNER JOIN tbllevelperformance ON 

tblLevelPerformance.user_id = tblUser.UserID

INNER JOIN tbllevel ON tblLevelPerformance.current_level = tblLevel.Level_ID



WHERE tblUser.U_Name =p_Name and tblUser.Active =1 and tblLevelPerformance.level_achieved = 0;



SELECT  tblLevel.Level_ID,
				Level_Name,
				tblRoles.Role_Name,
			  tblRoles.Role_ID,
				tblLevel.Active,
				tblLevel.Level_Position,
				BaseHours,
				tblLevel.Points
FROM tblLevel
INNER JOIN tblRoles ON 
	tblLevel.Role_ID = tblRoles.Role_ID
WHERE tblRoles.Active = 1 
ORDER BY tblLevel.Level_Position ASC;



ELSE


Select  

tblUser.UserID,tblUser.U_Name,tblUser.U_SysRole,tblUser.U_RolesID,tblUser.U_Password,tblUser.U_FirstName,tblUser.U_LastName,tblUser.U_NickName,tblUser.Active,tblUser.U_Email,tblUser.U_SiteID

,tblUser.U_EmpNo,tblUser.ManagerID,tblUser.Display_Name,tblUser.U_Points,tblUser.ActiveUpdatedDate,M.U_Email AS ManagerEmail,tblRoles.Role_Name as RoleName,tblSite.site_name AS SiteName



from tblUser INNER JOIN

tblRoles ON tblUser.U_RolesID = tblRoles.Role_ID 

INNER JOIN

tblSite ON tblUser.U_SiteID = tblSite.site_id

LEFT OUTER JOIN

tblUser M ON  tblUser.ManagerID= M.UserID


WHERE tblUser.U_Name =p_Name and tblUser.Active =1;



END IF;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GetUsers_Manager
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_GetUsers_Manager`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_GetUsers_Manager`()
BEGIN



SELECT tblUser.UserID,tblUser.U_Name FROM tblUser WHERE tblUser.U_SysRole = 'Manager';



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertAwardImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertAwardImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertAwardImage`(p_AwardImage varchar(100),p_AwardThumbnail varchar(100),  p_AwardID int,p_CurrentImage INT)
BEGIN

INSERT INTO tblAwardImages (Award_Image,Award_Thumbnail,Award_ID,Uploaded_Date,Current_Image)

VALUES(p_AwardImage, p_AwardThumbnail, p_AwardID, CURRENT_DATE(),p_CurrentImage);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertAwards
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertAwards`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertAwards`(p_AwardName varchar(100),p_AwardDesc varchar (200),p_KPIID INT,p_TargetID INT,p_AwardManual INT, OUT p_AwardID INT,p_AwardCategoryID INT)
BEGIN





		INSERT INTO tblAwards(Award_Name,Award_Desc,KPIID,Target_Value,Award_Manual,AwardCategoryID)



		VALUES (p_AwardName,p_AwardDesc,p_KPIID,p_TargetID,p_AwardManual,p_AwardCategoryID);

	

	SET p_AwardID = LAST_INSERT_ID();



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertCategory
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertCategory`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertCategory`(p_CategoryName Varchar(100))
BEGIN
IF ( NOT EXISTS(SELECT * FROM tblQuizCategory WHERE CategoryName = p_CategoryName))
	THEN
		INSERT INTO tblQuizCategory (CategoryName)
		VALUES (p_CategoryName);
	ELSE
		CALL DuplicatePRO;
	END IF; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertContest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertContest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertContest`(p_ContestName varchar(100),p_RoleID int,p_ContestGraphics Blob,p_ContestGraphicsExt varchar(10),p_ContestStartDate datetime,p_ContestEndDate datetime,p_Site_ID INT,  p_KPIID INT)
BEGIN



insert into tblContest(Contest_Name,Role_ID,Contest_Graphics,Contest_Graphics_Ext,Contest_StartDate,Contest_EndDate,Site_ID, KPIID )



values(p_ContestName,p_RoleID,p_ContestGraphics,p_ContestGraphicsExt,p_ContestStartDate,p_ContestEndDate,p_Site_ID, p_KPIID);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertDataElement
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertDataElement`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertDataElement`(p_MatchID INT, p_ElementName VARCHAR(250), p_IsPicture INT)
BEGIN

	INSERT INTO tbldataelement (MatchID,ElementName,IsPicture,CreatedDate)
	VALUES (p_MatchID,p_ElementName,p_IsPicture,now());
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertDataSet
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertDataSet`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertDataSet`(p_DataSetElementsData VARCHAR(500), p_SiteID int, p_MatchID int, p_DataSetImage varchar(100), p_DataSetImageThumbnail varchar(100), out p_Did int)
BEGIN

	INSERT INTO tblmatchdatasets (DataSetElementsData, SiteID, MatchID, CreatedDate, DataSetImage, DataSetImageThumbnail)
	VALUES (p_DataSetElementsData, p_SiteID, p_MatchID, now(), p_DataSetImage, p_DataSetImageThumbnail);
	
SET p_Did = LAST_INSERT_ID();

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertDataSetLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertDataSetLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertDataSetLevels`(p_DataSetID INT, p_RoleID INT, p_LevelID INT)
BEGIN
	
	INSERT INTO tblmatchdatasetlevels (DataSetID,RoleID,LevelID)
	VALUES (p_DataSetID, p_RoleID, p_LevelID);
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertGame
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertGame`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertGame`(p_ImageName Varchar(100),p_GameName Varchar(100))
BEGIN

IF ( NOT EXISTS(SELECT * FROM tblQuizGames WHERE GameName = p_GameName))

	THEN

		INSERT INTO tblQuizGames (GameName,CreatedDate,ImageName)

		VALUES (p_GameName,NOW(),p_ImageName);

	ELSE

		CALL DuplicatePRO;

	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertImage`(p_UserID int,p_PlayerImage varchar(100),p_PlayerThumbnail varchar(100))
BEGIN



INSERT INTO tblUserImages(UserID,U_UploadDate,Player_Image,Player_Thumbnail)



VALUES (p_UserID,Curdate(),p_PlayerImage,p_PlayerThumbnail);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertKPI
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertKPI`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertKPI`(p_Descp Varchar(500),p_KpiName varchar(100),p_KpiMeasure varchar(100), p_KpiType varchar(100),p_KpiCategory varchar(50), p_KpiTipsDESC varchar(500), p_KpiTipsLINK varchar(500))
BEGIN

INSERT INTO tblKPI(KPI_name,KPI_measure,KPI_type,KPI_Category,KPI_Descp,TipsDESC,TipsLINK)



VALUES (p_KpiName,p_KpiMeasure,p_KpiType,p_KpiCategory,p_Descp,p_KpiTipsDESC, p_KpiTipsLINK);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertLevel
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertLevel`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertLevel`(p_LevelName varchar(100),p_RoleID int, 
p_levelImage varchar(100),p_levelthumbnail varchar(100),  p_LevelPosition int, p_BaseHours int, 				p_Points int,p_CurrentlyIn varchar(45),
													 p_Reach varchar(45), p_Game varchar(50),OUT p_LevelID INT)
BEGIN

IF ( NOT EXISTS(SELECT * FROM tblLevel WHERE Level_Name = p_LevelName AND Role_ID = p_RoleID))
	THEN

insert into tblLevel(Level_Name,Role_ID, Level_Position,BaseHours,Level_date,ImageName,ImageThumbnail,Points,CurrentlyIn,Reach,Game)
values(p_LevelName,p_RoleID,p_LevelPosition,p_BaseHours,CurDate(),p_levelImage,p_levelthumbnail, p_Points,p_CurrentlyIn,p_Reach,p_Game);


SET p_LevelID = LAST_INSERT_ID();
	ELSE
		CALL DuplicatePRO;
	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertLevelGame
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertLevelGame`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertLevelGame`(p_GameName varchar(50))
BEGIN

	INSERT INTO tblLevelGame (GameName)

	VALUES (p_GameName);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertLevelGameDLL
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertLevelGameDLL`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertLevelGameDLL`(p_GameDropdownName varchar(50),p_GameID INT)
BEGIN

	INSERT INTO tblLevelGameDDL (GameDropdownName,GameID)

	VALUES (p_GameDropdownName,p_GameID);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertLifeLine
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertLifeLine`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertLifeLine`(UserID int , QuizID int, DateUsed varchar(50), 
											  ReduceChoices_LifeLine int, ReplaceQuestion_LifeLine int,
											  AddCounter_LifeLine int)
BEGIN
Insert into tbllifelines(UserID,QuizID,DateUsed,ReduceChoices_LifeLine,ReplaceQuestion_LifeLine,AddCounter_LifeLine) 
Values (UserID,QuizID,DateUsed,ReduceChoices_LifeLine,ReplaceQuestion_LifeLine,AddCounter_LifeLine);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertMatch
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertMatch`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertMatch`(p_MatchName VARCHAR(250), p_PointsForCompletation INT,
														p_MaxPlaysPerDay INT, p_NoOfDataSet INT,
														p_NoOfRounds INT, p_MatchImage VARCHAR(100),
														p_MatchImageThumbnail VARCHAR(100), p_KPIID int)
BEGIN
IF ( NOT EXISTS(SELECT * FROM tblMatch WHERE MatchName = p_MatchName))
	THEN
		INSERT INTO tblmatch (MatchName,PointsForCompletation,MaxPlaysPerDay,NoOfDataSet,NoOfRounds,CreatedDate,MatchImage,MatchImageThumbnail,KPI_ID)
		VALUES (p_MatchName,p_PointsForCompletation,p_MaxPlaysPerDay,p_NoOfDataSet,p_NoOfRounds,NOW(),p_MatchImage,p_MatchImageThumbnail,p_KPIID);

	ELSE
		CALL DuplicatePRO;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertMatchPlayLog
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertMatchPlayLog`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertMatchPlayLog`(p_UserID int, p_MatchID int, p_MatchTime varchar(100), p_MatchPlays int)
BEGIN

Insert into tblMatchPlayLog(UserID, MatchID, MatchTime, MatchPlays) Values(p_UserID, p_MatchID, p_MatchTime, p_MatchPlays);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertMatchScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertMatchScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertMatchScore`(p_UserID int, p_MatchID int, p_Points int, p_ElapsedTime int, p_IsCorrect int)
BEGIN

INSERT INTO tblUserMatchPoints(UserID, MatchID, PointsAchieved, ElaspedTime, IsCorrect, MatchTime)
VALUES (p_UserID, p_MatchID, p_Points, p_ElapsedTime, p_IsCorrect, Now());

INSERT INTO tblUserMatchPointsTemperory(UserID, MatchID, PointsAchieved, ElaspedTime, IsCorrect, MatchTime)
VALUES (p_UserID, p_MatchID, p_Points, p_ElapsedTime, p_IsCorrect, Now());


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertMessage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertMessage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertMessage`(p_FromUserID int,p_ToUserID int,p_MessageSubject varchar(100),p_MessageText varchar(500))
BEGIN



INSERT INTO tblMessages(From_UserID,To_UserID,Message_Subject,Message_Text,Sent_Date)

VALUES(p_FromUserID,p_ToUserID,p_MessageSubject,p_MessageText,CURRENT_TIMESTAMP());

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertMessageReply
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertMessageReply`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertMessageReply`(p_FromUserID int,p_ToUserID int,p_MessageSubject varchar(100),p_MessageText varchar(500),p_RepliedMessageID int)
BEGIN

	

INSERT INTO tblMessages(From_UserID,To_UserID,Message_Subject,Message_Text,Sent_Date,IsRead,IsReply,RepliedMessageID)

VALUES(p_FromUserID,p_ToUserID,p_MessageSubject,p_MessageText,CURRENT_TIMESTAMP(),0,1,p_RepliedMessageID);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertPerformance
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertPerformance`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertPerformance`(p_UserID int,p_CurrentLevel int,p_NextLevel int,p_LastLevel int,p_LevelAchieved int,p_TargetScores int,p_AchievedScores int)
BEGIN



insert into tblLevelPerformance(user_id,current_level,next_level,last_level,level_achieved,target_scores,achieved_scores)



values(p_UserID,p_CurrentLevel,p_NextLevel,p_LastLevel,p_LevelAchieved,p_TargetScores,p_AchievedScores);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertQuestionLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertQuestionLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertQuestionLevels`(p_QuestionID INT, p_RoleID INT, p_LevelID INT)
BEGIN
	/*
IF (EXISTS(SELECT * FROM tblQuestionLevels WHERE QuestionID = p_QuestionID AND RoleID = p_RoleID))
	THEN
		DELETE FROM tblQuestionLevels WHERE QuestionID = p_QuestionID AND RoleID = p_RoleID; 
		INSERT INTO tblQuestionLevels (QuestionID,RoleID,LevelID)
		VALUES (p_QuestionID,p_RoleID,p_LevelID);
	ELSE
		INSERT INTO tblQuestionLevels (QuestionID,RoleID,LevelID)
		VALUES (p_QuestionID,p_RoleID,p_LevelID);
	END IF;*/


		INSERT INTO tblQuestionLevels (QuestionID,RoleID,LevelID)
		VALUES (p_QuestionID,p_RoleID,p_LevelID);
	

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertQuestions
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertQuestions`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertQuestions`(p_QuestionText Varchar(200),p_ShortQuestion varchar(100), p_QuestionExplanation VARCHAR(300), p_Answer1 VarChar(100),p_Answer2 VarChar(100), p_Answer3 VarChar(100), p_Answer4 VarChar(100), p_CorrectAnswer VarChar(100), p_Category INT, p_SiteID INT, p_QuizID int, p_QuestionImage VARCHAR(100), p_QuestionImageThumbnail VarChar(100),out p_Qid int)
BEGIN
/*
IF ( NOT EXISTS(SELECT * FROM tblQuizQuestions WHERE QuestionText = p_QuestionText))
	THEN
		INSERT INTO tblQuizQuestions (QuestionText,ShortQuestion,QuestionExplanation,Answer1,Answer2,Answer3,Answer4,CorrectAnswer,Category,SiteID,QuizID,QuestionImage,QuestionImageThumbnail)
		VALUES (p_QuestionText,p_ShortQuestion,p_QuestionExplanation,p_Answer1,p_Answer2,p_Answer3,p_Answer4,p_CorrectAnswer,p_Category , p_SiteID,p_QuizID,p_QuestionImage,p_QuestionImageThumbnail);
	ELSE
		CALL DuplicatePRO;
	END IF;

*/
INSERT INTO tblQuizQuestions (QuestionText,ShortQuestion,QuestionExplanation,Answer1,Answer2,Answer3,Answer4,CorrectAnswer,Category,SiteID,QuizID,QuestionImage,QuestionImageThumbnail)
VALUES (p_QuestionText,p_ShortQuestion,p_QuestionExplanation,p_Answer1,p_Answer2,p_Answer3,p_Answer4,p_CorrectAnswer,p_Category , p_SiteID,p_QuizID,p_QuestionImage,p_QuestionImageThumbnail);
	

SET p_Qid = LAST_INSERT_ID();/*OUT p_Qid int
p_QuestionText Varchar(200),p_ShortQuestion varchar(100), p_QuestionExplanation VARCHAR(300), p_Answer1 VarChar(100),p_Answer2 VarChar(100), p_Answer3 VarChar(100), p_Answer4 VarChar(100), p_CorrectAnswer VarChar(100), p_Category INT, p_SiteID INT, p_QuizID int, p_QuestionImage VARCHAR(100), p_QuestionImageThumbnail VarChar(100)
*/
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertQuiz
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertQuiz`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertQuiz`(p_QuizName VARCHAR(250), p_NoOfQuestions INT,	p_TimePerQuestion INT, p_TimesPlayablePerDay INT, 
p_TimeBeforePointsDeduction INT, p_PointsPerQuestion INT, p_QuizImage VARCHAR(100),  p_QuizImageThumbnail VARCHAR(100),
p_KPIID int,out p_Qid int)
BEGIN
IF ( NOT EXISTS(SELECT * FROM tblQuiz WHERE QuizName = p_QuizName))
	THEN
		INSERT INTO tblQuiz (QuizName,NoOfQuestions,TimePerQuestion,TimesPlayablePerDay,TimeBeforePointsDeduction,PointsPerQuestion,CreatedDate,QuizImage,QuizImageThumbnail,KPI_ID)
		VALUES (p_QuizName,p_NoOfQuestions,p_TimePerQuestion,p_TimesPlayablePerDay,p_TimeBeforePointsDeduction,p_PointsPerQuestion,NOW(),p_QuizImage,p_QuizImageThumbnail,p_KPIID);
    SET p_Qid = LAST_INSERT_ID();
	ELSE
		CALL DuplicatePRO;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertQuizLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertQuizLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertQuizLevels`(p_QuizID INT, p_RoleID INT, p_LevelID INT)
BEGIN
	
		INSERT INTO tblquizlevels(QuizID ,RoleID,LevelID)
		VALUES (p_QuizID,p_RoleID,p_LevelID);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertQuizPlayLog
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertQuizPlayLog`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertQuizPlayLog`(UserID int, QuizID int, QuizTime varchar(100))
BEGIN

Insert into tblQuizPlayLog(UserID, QuizID, QuizTime) Values(UserID, QuizID, QuizTime);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertQuizScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertQuizScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertQuizScore`(p_UserID int,p_QuizID int,p_QuestionID int,p_Points int,p_ElapsedTime int,p_IsCorrect int)
BEGIN





insert into tblUserQuizPoints(UserID,QuizID, QuestionID,PointsAchieved,ElaspedTime,IsCorrect, QuizTime)

values(p_UserID,p_QuizID,p_QuestionID,p_Points,p_ElapsedTime,p_IsCorrect,Now());







insert into tblUserQuizPointsTemperory(UserID,QuizID, QuestionID,PointsAchieved,ElaspedTime,IsCorrect, QuizTime)

values(p_UserID,p_QuizID,p_QuestionID,p_Points,p_ElapsedTime,p_IsCorrect,Now());



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertRedeemPoints
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertRedeemPoints`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertRedeemPoints`(p_UserID int,p_RewardID int,p_Point int)
BEGIN

INSERT INTO tblRedeem(User_ID,Reward_ID,Redeem_Points,Redeem_Date)

VALUES(p_UserID,p_RewardID,p_Point,CURRENT_TIMESTAMP());

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertReward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertReward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertReward`(p_RewardType int,OUT p_RewardID INT,p_RewardDesc varchar(200),p_RewardName varchar(100),p_RewardPoints int(11))
BEGIN



INSERT INTO tblRewards(Reward_Descp,Reward_Name,Reward_Cost,Reward_Type)



VALUES (p_RewardDesc,p_RewardName,p_RewardPoints,p_RewardType);

SET p_RewardID = LAST_INSERT_ID();



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertRewardImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertRewardImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertRewardImage`(p_CurrentImage int,p_RewardImage varchar(100),p_RewardThumbnail varchar(100),  p_RewardID int)
BEGIN



	

INSERT INTO tblRewardImages (Reward_Image,Reward_Thumbnail,Reward_ID,Uploaded_Date,Current_Image)

VALUES(p_RewardImage, p_RewardThumbnail, p_RewardID, CURRENT_DATE(),p_CurrentImage);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertRole
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertRole`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertRole`(p_RoleName varchar(100))
BEGIN





	INSERT INTO tblRoles(Role_Name,ActiveUpdatedDate)



	VALUES (p_RoleName,Curdate());



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertRound
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertRound`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertRound`(p_MatchID INT, p_RoundNumber INT, p_RoundName varchar(100), 
														p_NoOfDataSets int, p_TimePerRound int, p_PointsPerRound int, p_ShowHint int)
BEGIN
	
	INSERT INTO tblround (MatchID, RoundNumber,RoundName,NoOfDataSets,TimePerRound,PointsPerRound,CreatedDate, ShowHint)
	VALUES (p_MatchID, p_RoundNumber, p_RoundName,p_NoOfDataSets,p_TimePerRound,p_PointsPerRound,now(),p_ShowHint);

	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertScore`(p_UserID INT,p_KPIID INT,p_Score INT,p_Measure varchar(50),p_EntryDate datetime)
BEGIN

	INSERT INTO tblScores(User_ID,U_Type,Type_ID,Score, Measure,Entry_Date)

	VALUES(p_UserID,'KPI',p_KPIID,p_Score,p_Measure,p_EntryDate);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertScoreAuto
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertScoreAuto`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertScoreAuto`(p_LevelID int,p_UserID int,p_KPIID int,p_Score int, p_Measure varchar(50),p_EntryDate datetime)
BEGIN
	
SET SQL_SAFE_UPDATES=0;

IF ( NOT EXISTS(SELECT * FROM tblScores WHERE Type_ID=p_KPIID AND U_Type ='KPI' AND User_ID =p_UserID AND LevelID = p_LevelID))
then
Insert into tblScores(User_ID,U_Type,Type_ID,Score,Entry_Date,LevelID,Measure)
values(p_UserID,'KPI',p_KPIID,p_Score,p_EntryDate,p_LevelID,p_Measure);


Else
IF(p_Measure = 'MAX' OR p_Measure = 'max' OR p_Measure = 'Max')
THEN

SET @var = (Select Score from tblscores WHERE  Type_ID=p_KPIID AND U_Type ='KPI' AND User_ID =p_UserID AND LevelID = p_LevelID);

IF(p_Score > @var)
THEN
Update tblScores
Set Score= p_Score
Where Type_ID=p_KPIID AND U_Type ='KPI' AND User_ID =p_UserID AND LevelID = p_LevelID;
END IF;

ELSE
Update tblScores
Set Score= Score + p_Score
Where Type_ID=p_KPIID AND U_Type ='KPI' AND User_ID =p_UserID AND LevelID = p_LevelID;

END IF;

End IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertSecurityAnswers
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertSecurityAnswers`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertSecurityAnswers`(p_UserID int, p_Question int, p_Answer varchar(200), p_Password varchar(50),p_Email varchar(50),p_SecurityType int)
BEGIN

	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 

    BEGIN

        ROLLBACK;        

    END;



	START TRANSACTION;



		UPDATE tblUser 

		SET tblUser.U_Password = p_Password

		WHERE tblUser.UserID = p_UserID;



			



		IF (p_SecurityType = 1)

		THEN

			UPDATE tblUser 

			SET tblUser.U_Email = p_Email

			WHERE tblUser.UserID = p_UserID;

		ELSE

			/*IF ( NOT EXISTS(SELECT * FROM tblSecurityAnswers WHERE UserID = p_UserID))

			THEN*/

				INSERT INTO tblSecurityAnswers

				(UserID,Question_ID,Answer)

				VALUES

				(p_UserID,p_Question,p_Answer);

			/*ELSE

				UPDATE tblSecurityAnswers

				SET Question_ID = p_Question,

						Answer = p_Answer

				WHERE UserID =  p_UserID;

			END IF;*/

							

		END IF;

	

	COMMIT;

	



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertSecurityAnswersTemp
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertSecurityAnswersTemp`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertSecurityAnswersTemp`(p_UserID int, p_Question int, p_Answer varchar(200))
BEGIN
	
/*
		UPDATE tblUser 
		SET tblUser.U_Password = p_Password
		WHERE tblUser.UserID = p_UserID;*/

			

			IF ( NOT EXISTS (SELECT * FROM tblSecurityAnswers WHERE UserID = p_UserID and Question_ID = p_Question))
			THEN

				INSERT INTO tblSecurityAnswers
				(UserID,Question_ID,Answer)
				VALUES
				(p_UserID,p_Question,p_Answer);

			ELSE
				UPDATE tblSecurityAnswers
				SET 	Answer = p_Answer
				WHERE UserID =  p_UserID and Question_ID = p_Question;
			END IF;
							
		
	
	
	

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertSite
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertSite`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertSite`(p_SiteName VARCHAR(50),p_SiteType VARCHAR(50), p_SiteAddress VARCHAR(150))
BEGIN

	IF ( NOT EXISTS(SELECT * FROM tblSite WHERE site_name = p_SiteName AND site_type = p_SiteType))

	THEN

		INSERT INTO tblSite (site_name,site_type,site_address)

		VALUES (p_SiteName,p_SiteType,p_SiteAddress);

	ELSE

		CALL DuplicatePRO;

	END IF;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertTarget
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertTarget`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertTarget`(p_TargetValue int,p_KpiID int,p_LevelID int,p_RoleID int, p_Description varchar(500),p_Points int)
BEGIN







IF (SELECT Target_id FROM tblTarget WHERE  Target_Value=p_TargetValue  AND Role_ID=p_RoleID AND KPI_ID=p_KpiID AND Level_ID=p_LevelID) IS NULL THEN



INSERT INTO tblTarget(Target_Value,KPI_ID,Level_ID,Role_ID,Target_Desc,Points)



VALUES(p_TargetValue,p_KpiID,p_LevelID,p_RoleID,p_Description,p_Points);

	

END IF;







END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertUser
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertUser`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertUser`(p_CurrentLevel int,p_NextLevel int,p_LastLevel int,p_LevelAchieved int, p_U_Name varchar(50) , p_U_LastName varchar(50) , p_U_NickName varchar(50) , p_U_Password varchar(50) , p_U_Email varchar(50) , p_U_SiteID INT , p_U_SysRole varchar(50), p_U_RolesID INT , p_Active tinyint(1), p_U_FirstName varchar(50),p_ManagerID INT)
BEGIN

 



DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 

    BEGIN

        ROLLBACK;

				CALL DuplicatePro;

				

    END;



	START TRANSACTION;

	insert into tblUser(U_Name,U_LastName,U_NickName,U_Password,U_Email,U_SiteID,U_SysRole,U_RolesID,Active,U_FirstName,ManagerID)



	values(p_U_Name,p_U_LastName,p_U_NickName,NULL,p_U_Email,p_U_SiteID,p_U_SysRole,p_U_RolesID,p_Active,p_U_FirstName,p_ManagerID);

	IF(LAST_INSERT_ID() <> 0)

	then

		insert into tblLevelPerformance(user_id,current_level,next_level,last_level,level_achieved,target_scores,achieved_scores)



		values(LAST_INSERT_ID(),p_CurrentLevel,p_NextLevel,p_LastLevel,p_LevelAchieved,(Select IFNULL(Sum(Target_Value),'0') from tblTarget

		where Role_ID =p_U_RolesID AND Level_ID=p_CurrentLevel),0);

	End if;

COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_InsertUserAwards
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_InsertUserAwards`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_InsertUserAwards`(IN `p_user_id` int,IN `p_award_id` int,IN `p_manual` tinyint,IN `p_awardedBy` int)
BEGIN

	/*IF ( NOT EXISTS(SELECT * FROM tblUserAwards WHERE user_id = p_user_id AND award_id = p_award_id))

	THEN*/

			INSERT INTO tblUserAwards ( user_id,award_id,awarded_date,manual,awardedBy)

      VALUES (p_user_id,p_award_id,NOW(),p_manual,p_awardedBy);

	/*ELSE

		CALL DuplicatePRO;

	END IF;*/

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_PasswordRequest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_PasswordRequest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_PasswordRequest`(p_UserNameID varchar(50))
BEGIN
UPDATE tblUser
SET U_Password = NULL
Where U_Name = p_UserNameID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_Player_GetAward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_Player_GetAward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_Player_GetAward`(p_UserID INT)
BEGIN



	/*SELECT tblScores.ID,tblScores.User_ID,tblScores.Type_ID,tblAwards.Award_Name,tblAwards.Award_ID,tblAwards.Award_Desc

	FROM tblScores

	INNER JOIN tblAwards ON 

	tblScores.Type_ID = tblAwards.Award_ID

	WHERE tblScores.User_ID = p_UserID AND tblScores.U_Type = 'Award';*/



IF EXISTS(SELECT * from tblUserAwards WHERE tblUserAwards.achieved_scores = tblUserAwards.target_scores and target_scores>=0 and awarded_date is null and tblUserAwards.user_id=p_UserID)

then

SET SQL_SAFE_UPDATES=0;

   update tblUserAwards

   set awarded_date=NOW()

   Where tblUserAwards.achieved_scores = tblUserAwards.target_scores  and tblUserAwards.user_id=p_UserID;

SELECT tblUserAwards.achieved_scores,tblUserAwards.target_scores,

				tblUserAwards.awarded_date,tblUserAwards.awardedBy,tblUserAwards.manual,

				tblUserAwards.userAwardsId,tblUserAwards.user_id,

				tblAwards.Award_Name,

				tblAwards.Award_Desc,tblAwards.Award_ID,

				tblAwards.AwardCategoryID,

(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image

	FROM tblUserAwards 

	INNER JOIN tblAwards ON 

	tblUserAwards.award_id = tblAwards.Award_ID

WHERE tblUserAwards.user_id = p_UserID;



else



SELECT tblUserAwards.achieved_scores,tblUserAwards.target_scores,

				tblUserAwards.awarded_date,tblUserAwards.awardedBy,tblUserAwards.manual,

				tblUserAwards.userAwardsId,tblUserAwards.user_id,

				tblAwards.Award_Name,

				tblAwards.Award_Desc,tblAwards.Award_ID,

				tblAwards.AwardCategoryID,

(SELECT Award_Image FROM tblAwardImages WHERE Current_Image = 1 AND Active = 1 AND tblAwardImages.Award_ID = tblAwards.Award_ID) as Award_Image

	FROM tblUserAwards 

	INNER JOIN tblAwards ON 

	tblUserAwards.award_id = tblAwards.Award_ID

WHERE tblUserAwards.user_id = p_UserID;  

END IF ;

End$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_Player_GetContest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_Player_GetContest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_Player_GetContest`()
BEGIN



SELECT   tblUser.UserID,

				 Contest_ID,

				 Contest_Name,     

				 Contest_Graphics,

				 Contest_Graphics_Ext,

				 Contest_StartDate,

				 Contest_EndDate,			 

				 tblContest.Active,

				 tblContest.Contest_Descp,

				 tblContest.Role_ID

 FROM tblContest 

INNER JOIN tblUser ON

tblContest.Role_ID = tblUser.U_RolesID

WHERE  tblContest.Active = 1

  and (CURDATE() BETWEEN  tblContest.Contest_StartDate and tblContest.Contest_EndDate) and tblContest.Role_ID <> ''



UNION

SELECT   tblUser.UserID,

				 Contest_ID,

				 Contest_Name,     

				 Contest_Graphics,

				 Contest_Graphics_Ext,

				 Contest_StartDate,

				 Contest_EndDate,			 

				 tblContest.Active,

				 tblContest.Contest_Descp,

				 tblContest.Role_ID

 FROM tblContest

INNER JOIN tblUser ON

tblContest.Site_ID = tblUser.U_SiteID

WHERE tblContest.Active = 1

 and (CURDATE() BETWEEN  tblContest.Contest_StartDate and tblContest.Contest_EndDate) and tblContest.Role_ID <> '';

 



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_PopupShowed
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_PopupShowed`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_PopupShowed`(p_UserID INT,p_LevelID INT)
BEGIN



DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 

    BEGIN

        ROLLBACK;        

    END;



	START TRANSACTION;

	UPDATE tblLevelPerformance 

	SET popup_showed = 1,

			level_achieved = 1 

	WHERE user_id = p_UserID 

	AND current_level = p_LevelID;



	INSERT INTO tblLevelPerformance 

	(user_id,current_level,next_level,last_level,level_achieved,target_scores,achieved_scores)



	values(p_UserID,(SELECT Level_ID FROM tblLevel 

														WHERE  tblLevel.Level_Position = 

																						(SELECT (levels.Level_Position + 1) 

																							FROM tblLevel levels 

																							WHERE levels.Level_ID =p_LevelID 

																						) AND tblLevel.Role_ID = (SELECT U_RolesID FROM tblUser WHERE UserID = p_UserID)

														),(SELECT Level_ID FROM tblLevel 

														WHERE  tblLevel.Level_Position = 

																						(SELECT (levels.Level_Position + 2) 

																							FROM tblLevel levels 

																							WHERE levels.Level_ID =p_LevelID 

																						) AND tblLevel.Role_ID = (SELECT U_RolesID FROM tblUser WHERE UserID = p_UserID)

														),p_LevelID,0,0,0);



	UPDATE tblUser SET U_Points = U_Points + (SELECT Points FROM tblLevel WHERE Level_ID = p_LevelID AND Active = 1 )

	WHERE UserID = p_UserID;





COMMIT;

	



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_QuizData
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_QuizData`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_QuizData`()
BEGIN

Select *from tblQuizQuestions INNER JOIN tblLevel ON

tblQuizQuestions.LevelID = tblLevel.Level_ID

INNER JOIN tblRoles ON

tblQuizQuestions.RoleID = tblRoles.Role_ID;

Select * from tblQuizGames;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_QuizLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_QuizLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_QuizLevels`(p_QuizID INT)
BEGIN
	SELECT
tblRoles.Role_ID,
tblRoles.Role_Name,
tblLevel.Level_ID,
tblLevel.Level_Name,
tblLevel.Level_Position,

(Select 'yes' from tblquizlevels where tblquizlevels.LevelID=tblLevel.Level_ID and QuizID =p_QuizID) as Allow
FROM
tblRoles
INNER JOIN tblLevel ON tblLevel.Role_ID = tblRoles.Role_ID
WHERE
tblRoles.Active = 1 and tblLevel.Active=1
ORDER BY tblRoles.Role_ID,tblLevel.Level_Position;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ReportSumPoints
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_ReportSumPoints`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_ReportSumPoints`(p_UserID int,p_Points int)
BEGIN



Update tblUser

set U_Points = p_Points

Where tblUser.UserID = p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_RolesLevels
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_RolesLevels`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_RolesLevels`(p_QuestionID int)
BEGIN
	SELECT
tblRoles.Role_ID,
tblRoles.Role_Name,
tblLevel.Level_ID,
tblLevel.Level_Name,
tblLevel.Level_Position,

(Select 'yes' from tblQuestionLevels where tblQuestionLevels.LevelID=tblLevel.Level_ID and QuestionID=p_QuestionID ) as Allow
FROM
tblRoles
INNER JOIN tblLevel ON tblLevel.Role_ID = tblRoles.Role_ID
WHERE
tblRoles.Active = 1 and tblLevel.Active=1
ORDER BY tblRoles.Role_ID,tblLevel.Level_Position;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_RolesLevelsMatchDataSet
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_RolesLevelsMatchDataSet`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_RolesLevelsMatchDataSet`(p_DataSetID int)
BEGIN
	SELECT
		tblRoles.Role_ID,
		tblRoles.Role_Name,
		tblLevel.Level_ID,
		tblLevel.Level_Name,
		tblLevel.Level_Position,
		(SELECT 'yes' FROM tblMatchDataSetLevels where tblMatchDataSetLevels.LevelID = tblLevel.Level_ID and DataSetID = p_DataSetID ) as Allow
	FROM
		tblRoles
	INNER JOIN tblLevel ON tblLevel.Role_ID = tblRoles.Role_ID
	WHERE
		tblRoles.Active = 1 and tblLevel.Active=1
	ORDER BY tblRoles.Role_ID, tblLevel.Level_Position;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_TeamPerformance
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_TeamPerformance`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_TeamPerformance`(p_ManagerID INT)
BEGIN

	SELECT *,(CASE WHEN a.Likelihood < 80 THEN 'red' WHEN a.Likelihood < 90 AND a.Likelihood > 80 THEN 'Yellow' WHEN a.Likelihood > 90 AND a.Likelihood < 100 THEN 'Green' WHEN a.Likelihood = 100 THEN 'blue' WHEN a.Likelihood > 100 THEN 'Green' END) AS PlayerStatus FROM

	(SELECT vscore.*,CONCAT(tblUser.U_FirstName,' ',tblUser.U_LastName)  AS PlayerName,tblRoles.Role_Name,tblLevel.Level_Position,tblUserImages.Player_Thumbnail,tbluser.U_Points,

(select (IFNULL(sum(v_UserLevelScores.current_percentage),0)) / Count(*) from v_UserLevelScores where v_UserLevelScores.Level_ID=vscore.Level_ID and v_UserLevelScores.UserID=vscore.UserID ) AS Percentage

 

,BaseHours,



 (( (((BaseHours-Worked_Hour)/BaseHours)*100)/(100-   (select (IFNULL(sum(a.current_percentage),0)) / Count(*) from v_UserLevelScores a where a.Level_ID=vscore.Level_ID and a.UserID=vscore.UserID ))) *100) as Likelihood

   ,(BaseHours-Worked_Hour) as remainingHours



FROM v_UserLevelScores vscore



INNER JOIN tblLevelPerformance ON vscore.Level_ID = tblLevelPerformance.current_level AND vscore.UserID = tblLevelPerformance.user_id

INNER JOIN tblUser ON vscore.UserID = tblUser.UserID

LEFT JOIN tblUserImages ON vscore.UserID = tblUserImages.UserID AND tblUserImages.U_Current = 1

INNER JOIN tblRoles ON

vscore.Role_ID = tblRoles.Role_ID 

INNER JOIN tblLevel ON vscore.Level_ID = tblLevel.Level_ID

WHERE tblLevelPerformance.level_achieved = 0 AND (Select tblUser.Active from tblUser Where tblUser.UserID = vscore.UserID) = 1 AND (SELECT tblUser.ManagerID  FROM tblUser WHERE tblUser.UserID = vscore.UserID) = p_ManagerID

GROUP BY vscore.UserID,vscore.Level_ID ORDER BY Likelihood) a;









END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateAward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateAward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateAward`(p_ID int,p_CurrentImage int,p_AwardID INT,p_AwardName VARCHAR (100),p_AwardDesc VARCHAR (200),p_KPIID INT,p_TargetID INT,p_AwardManual INT,p_Active TINYINT(4),p_AwardCategoryID INT)
BEGIN

UPDATE tblAwards

SET Award_Name = p_AwardName,

	Award_Desc = p_AwardDesc,	

	KPIID = p_KPIID,

	Target_Value = p_TargetID,

	Award_Manual=p_AwardManual,

    Active = p_Active,

		AwardCategoryID = p_AwardCategoryID

WHERE Award_ID = p_AwardID ;



UPDATE tblAwardImages 

SET Current_Image = p_CurrentImage 

WHERE ID = p_ID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateCategory
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateCategory`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateCategory`(p_CategoryName varchar(100),p_CategoryID int)
BEGIN
Update tblQuizCategory
set CategoryName=p_CategoryName
where CategoryID=p_CategoryID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateContest
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateContest`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateContest`(p_ContestID INT,p_ContestName VARCHAR (100),p_RoleID INT,p_Active TINYINT(4),p_ContestGraphics Blob,p_ContestGraphicsExt varchar(10),p_ContestStartDate datetime,p_ContestEndDate datetime, p_SITE_ID INT, p_KPIID INT)
BEGIN

UPDATE tblContest

SET Contest_Name = p_ContestName,

	Role_ID = p_RoleID,

    Active = p_Active,

Contest_Graphics= p_ContestGraphics,

Contest_Graphics_Ext =p_ContestGraphicsExt,

Contest_StartDate = p_ContestStartDate,

Contest_EndDate= p_ContestEndDate,

Site_ID = p_Site_ID,

KPIID = p_KPIID





WHERE Contest_ID = p_ContestID ;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateDataElement
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateDataElement`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateDataElement`(p_ElementID INT, p_MatchID INT, p_ElementName VARCHAR(250), p_IsPicture INT)
BEGIN

UPDATE tbldataelement
SET MatchID = p_MatchID,
	ElementName = p_ElementName,
	IsPicture = p_IsPicture
WHERE ElementID = p_ElementID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateDataSet
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateDataSet`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateDataSet`(p_DataSetID int, p_DataSetElementsData VARCHAR(500), p_SiteID int, p_MatchID int, p_DataSetImage varchar(100), p_DataSetImageThumbnail varchar(100))
BEGIN

UPDATE tblmatchdatasets
SET
	DataSetID = p_DataSetID, 
	DataSetElementsData = p_DataSetElementsData,
	SiteID = p_SiteID,
	MatchID = p_MatchID,
	DataSetImage = p_DataSetImage,
	DataSetImageThumbnail = p_DataSetImageThumbnail
WHERE DataSetID = p_DataSetID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateGame
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateGame`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateGame`(p_ImageName Varchar(100),p_GameID int,p_GameName Varchar(100))
BEGIN

Update tblQuizGames

Set GameName = p_GameName,

ImageName=p_ImageName

Where Gameid = p_GameID;





END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateImage
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateImage`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateImage`(p_Current TinyInt(4),p_UserIDImage int(11),p_Active TINYINT(4))
BEGIN

UPDATE tblUserImages

SET 

    Active = p_Active,

	U_Current=p_Current



WHERE U_UserIDImage = p_UserIDImage ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateKPI
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateKPI`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateKPI`(p_Descp Varchar(500),p_KpiID INT,p_KpiName VARCHAR(100),p_KpiMeasure VARCHAR(100),p_KpiType VARCHAR(100), p_Active TINYINT(4),p_KpiCategory varchar(50), p_KpiTipsDESC varchar(500), p_KpiTipsLINK varchar(500))
BEGIN

UPDATE tblKPI 

SET KPI_name = p_KpiName,

		KPI_measure = p_KpiMeasure, 

		KPI_type = p_KpiType,

		Active = p_Active,

		KPI_Category = p_KpiCategory,

		KPI_Descp=p_Descp,

		TipsDESC = p_KpiTipsDESC,
		
		TipsLINK = p_KpiTipsLink



WHERE KPI_ID = p_KpiID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLevel
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLevel`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLevel`(p_LevelID INT,p_LevelName VARCHAR(100),p_RoleID INT,p_Active TINYINT(4), p_LevelPosition int, p_BaseHours int,  p_Dimension_top int, p_Dimension_left int,p_CurrentlyIn varchar(45),p_Reach varchar(45), p_Country varchar(50))
BEGIN



DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 

    BEGIN

        ROLLBACK;        

    END;



	START TRANSACTION;



UPDATE tblLevel 

SET Level_Name = p_LevelName,

		Role_ID = p_RoleID,

		Level_Position = p_LevelPosition,

		Active = p_Active,

    BaseHours = p_BaseHours,

		Dimension_top = p_Dimension_top,

		Dimension_left = p_Dimension_left,

		CurrentlyIn = p_CurrentlyIn,

		Reach = p_Reach,

		Country = p_Country

WHERE Level_ID =p_LevelID;

/*

UPDATE tblMap

SET Role_ID = p_RoleID,

		Level_ID = p_LevelID,

		Dimension_top = p_Dimension_top,

		Dimension_left = p_Dimension_left

WHERE Level_ID = p_LevelID;*/



COMMIT;

		

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLevelGame
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLevelGame`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLevelGame`(p_GameName varchar(50),p_Active INT,p_GameID INT)
BEGIN

	UPDATE tblLevelGame 

	SET GameName = p_GameName,

			Active = p_Active

	WHERE GameID = p_GameID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLevelGameDDL
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLevelGameDDL`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLevelGameDDL`(p_GameDropdownName varchar(50),p_GameID INT, p_Active INT, p_GameDropdownID INT)
BEGIN

	UPDATE tblLevelGameDDL 

	SET GameDropdownName = p_GameDropdownName,

			GameID = p_GameID,

			Active = p_Active

	WHERE GameDropdownID = p_GameDropdownID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLevelPosition
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLevelPosition`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLevelPosition`(p_xml VARCHAR(1000))
BEGIN



DECLARE i INT DEFAULT 1;

DECLARE xml VARCHAR(1000);

SET xml = p_xml;



WHILE i < LENGTH(xml)

DO

UPDATE tblLevel

SET Level_Position = (ExtractValue(xml, '//levelposition[$i]'))

WHERE Level_ID  = (ExtractValue(xml, '//levelid[$i]'));



SET i = i + 1 ;

 END WHILE;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLevelperformance
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLevelperformance`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLevelperformance`(p_UserID INT,p_LevelID INT)
BEGIN

UPDATE tblLevelPerformance 
	SET level_achieved = 1 
	WHERE user_id = p_UserID 
	AND current_level = p_LevelID;

IF ( NOT EXISTS(SELECT * FROM tblLevelPerformance WHERE tblLevelPerformance.user_id = p_UserID and 
																tblLevelPerformance.current_level=(SELECT Level_ID FROM tblLevel 
																WHERE  tblLevel.Level_Position = 
																						(SELECT (levels.Level_Position + 1) 
																							FROM tblLevel levels 
																							WHERE levels.Level_ID =p_LevelID 
																						) AND tblLevel.Role_ID = (SELECT U_RolesID FROM tblUser WHERE UserID = p_UserID)
																)))
	THEN
	INSERT INTO tblLevelPerformance 
	(user_id,current_level,next_level,last_level,level_achieved,target_scores,achieved_scores)

	values(p_UserID,(SELECT Level_ID FROM tblLevel 
														WHERE  tblLevel.Level_Position = 
																						(SELECT (levels.Level_Position + 1) 
																							FROM tblLevel levels 
																							WHERE levels.Level_ID =p_LevelID 
																						) AND tblLevel.Role_ID = (SELECT U_RolesID FROM tblUser WHERE UserID = p_UserID)
														),(SELECT Level_ID FROM tblLevel 
														WHERE  tblLevel.Level_Position = 
																						(SELECT (levels.Level_Position + 2) 
																							FROM tblLevel levels 
																							WHERE levels.Level_ID =p_LevelID 
																						) AND tblLevel.Role_ID = (SELECT U_RolesID FROM tblUser WHERE UserID = p_UserID)
														),p_LevelID,0,0,0);

	UPDATE tblUser SET U_Points = U_Points + (SELECT Points FROM tblLevel WHERE Level_ID = p_LevelID AND Active = 1 )
	WHERE UserID = p_UserID;

	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLevelperformance_PopupShowed
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLevelperformance_PopupShowed`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLevelperformance_PopupShowed`(p_UserID INT,p_LevelID INT)
BEGIN

UPDATE tblLevelPerformance 
	SET popup_showed = 1
	WHERE user_id = p_UserID 
	AND current_level = p_LevelID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateLoginTime
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateLoginTime`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateLoginTime`(p_userid int)
BEGIN

update tblUser

set LastLogin = Now()

Where UserID =p_userid;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateMatch
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateMatch`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateMatch`(p_MatchID INT, p_MatchName varchar(250), p_PointsForCompletation int(11),
													p_MaxPlaysPerDay int(11), p_NoOfDataSet int,
													p_NoOfRounds int, p_MatchImage varchar(100),
													p_MatchImageThumbnail varchar(100), p_KPIID INT)
BEGIN
UPDATE tblmatch
SET MatchName = p_MatchName,
	PointsForCompletation = p_PointsForCompletation,
	MaxPlaysPerDay = p_MaxPlaysPerDay,
	NoOfDataSet = p_NoOfDataSet,
	NoOfRounds = p_NoOfRounds,
	MatchImage = p_MatchImage,
	MatchImageThumbnail = p_MatchImageThumbnail,
	KPI_ID = p_KPIID
WHERE MatchID = p_MatchID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateMessageStatus
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateMessageStatus`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateMessageStatus`(p_MessageID int)
BEGIN



UPDATE tblMessages SET IsRead = 1

WHERE tblMessages.ID = p_MessageID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdatePassword
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdatePassword`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdatePassword`(p_UserID int,p_NewPassword varchar(100))
BEGIN

	

	UPDATE tblUser 

	SET tblUser.U_Password = p_NewPassword

	WHERE tblUser.UserID = p_UserID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdatePoints
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdatePoints`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdatePoints`(p_Points INT, p_UserID INT)
BEGIN

	UPDATE tblUser

SET 

        U_Points=p_Points

WHERE UserID = p_UserID ;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateQuestions
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateQuestions`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateQuestions`(p_QuestionID INT,p_ShortQuestion Varchar(100),p_QuestionText Varchar(200), p_QuestionExplanation VARCHAR(300), p_Answer1 VarChar(100),p_Answer2 VarChar(100), p_Answer3 VarChar(100), p_Answer4 VarChar(100), p_CorrectAnswer VarChar(100), p_Category INT, p_SiteID INT, p_QuizID int, p_QuestionImage VARCHAR(100), p_QuestionImageThumbnail VarChar(100))
BEGIN
UPDATE tblQuizQuestions
SET QuestionText =p_QuestionText,
		QuestionExplanation = p_QuestionExplanation,
		Answer1=p_Answer1,
		Answer2=p_Answer2,
		Answer3=p_Answer3,
		Answer4=p_Answer4,
		CorrectAnswer =p_CorrectAnswer,
		Category=p_Category,
		SiteID = p_SiteID,		
		QuizID= p_QuizID,
		QuestionImage=p_QuestionImage,
		QuestionImageThumbnail = p_QuestionImageThumbnail,
ShortQuestion=p_ShortQuestion

WHERE QuestionID= p_QuestionID;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateQuiz
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateQuiz`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateQuiz`(p_QuizID INT, p_QuizName VARCHAR(250), p_NoOfQuestions INT, 
													p_TimePerQuestion INT, p_TimesPlayablePerDay INT, 
													p_TimeBeforePointsDeduction INT, p_PointsPerQuestion INT, 
													p_QuizImage VARCHAR(100),  p_QuizImageThumbnail VARCHAR(100),
													p_KPIID INT)
BEGIN
UPDATE tblQuiz
SET QuizName = p_QuizName,
		NoOfQuestions = p_NoOfQuestions ,
		TimePerQuestion = p_TimePerQuestion,
		TimesPlayablePerDay = p_TimesPlayablePerDay,
		TimeBeforePointsDeduction = p_TimeBeforePointsDeduction,
		PointsPerQuestion = p_PointsPerQuestion,
		QuizImage = p_QuizImage,
		QuizImageThumbnail=p_QuizImageThumbnail,
		KPI_ID = p_KPIID
Where QuizID = p_QuizID;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateReward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateReward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateReward`(p_RewardType int,p_RewardDescp varchar(200),p_RewardID INT, p_RewardName Varchar(100),p_Active TINYINT(4),p_RewardPoints int(11), p_CurrentImage int(1),p_ID int)
BEGIN



UPDATE tblRewards 

SET Reward_Name = p_RewardName,

		Active = p_Active,

Reward_Cost =p_RewardPoints,

Reward_Descp=p_RewardDescp,

Reward_Type=p_RewardType

WHERE Reward_ID = p_RewardID;



UPDATE tblRewardImages 

SET Current_Image = p_CurrentImage 

WHERE ID = p_ID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateRole
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateRole`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateRole`(p_RoleID INT,p_RoleName VARCHAR(100),p_Active TINYINT(4),p_ActiveStatus int)
BEGIN

if(p_ActiveStatus =1)

then

UPDATE tblRoles 

SET Role_Name = p_RoleName,

		Active =  p_Active,

       ActiveUpdatedDate =CURRENT_TIMESTAMP()

WHERE Role_ID = p_RoleID;

END IF;



if(p_ActiveStatus =0)

then

UPDATE tblRoles 

SET Role_Name = p_RoleName,

		Active =  p_Active

WHERE Role_ID = p_RoleID;

END IF;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateRound
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateRound`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateRound`(p_MatchID INT, p_RoundID INT, p_RoundNumber int, p_RoundName VARCHAR(250),
														p_NoOfDataSets int, p_TimePerRound int, p_PointsPerRound int, p_ShowHint int)
BEGIN

UPDATE tblround
SET
	MatchID = p_MatchID,
	RoundNumber = p_RoundNumber,
	RoundName = p_RoundName,
	NoOfDataSets = p_NoOfDataSets,
	TimePerRound = p_TimePerRound,
	PointsPerRound = p_PointsPerRound,
	ShowHint = p_ShowHint
WHERE `RoundID` = p_RoundID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateScoreManual
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateScoreManual`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateScoreManual`(p_Current int,p_UserID int,p_KPIID int,p_Score int)
BEGIN
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
        ROLLBACK;        
    END;

	START TRANSACTION;
IF ( NOT EXISTS(SELECT * FROM tblScores WHERE Type_ID=p_KPIID AND U_Type ='KPI' AND User_ID =p_UserID AND LevelID = p_Current))
then
Insert into tblScores(User_ID,U_Type,Type_ID,Score,Entry_Date,LevelID)
values(p_UserID,'KPI',p_KPIID,p_Score,NOW(),p_Current);
/*Update tblLevelPerformance
Set achieved_scores=p_Acheived
Where user_id=p_UserID AND current_level = p_Current ;*/
Else
Update tblScores
Set Score= p_Score
Where Type_ID=p_KPIID AND U_Type ='KPI' AND User_ID =p_UserID AND LevelID = p_Current;

/*Update tblLevelPerformance
Set achieved_scores=p_Acheived
Where user_id=p_UserID AND current_level = p_Current ;*/
End IF;
commit;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateSite
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateSite`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateSite`(p_SiteID INT,p_SiteName VARCHAR(50),p_SiteType VARCHAR(50), p_SiteAddress VARCHAR(150),p_Active tinyint)
BEGIN

	

	UPDATE tblSite

	SET site_name = p_SiteName,

			site_type = p_SiteType,

			site_address = p_SiteAddress,

			Active = p_Active

	WHERE site_id = p_SiteID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateTarget
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateTarget`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateTarget`(p_TargetID INT,p_TargetValue int,p_KpiID INT,p_LevelID INT,p_RoleID INT,p_Active TINYINT,p_Description varchar(500))
BEGIN

UPDATE tblTarget

SET Target_Value = p_TargetValue,

    KPI_ID = p_KpiID,

    Level_ID = p_LevelID,

	Role_ID = p_RoleID,

    Active = p_Active,

		Target_Desc = p_Description



WHERE Target_ID = p_TargetID ;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateUser
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateUser`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateUser`(p_DisplayName int,p_UserID INT,p_UserName VARCHAR (100),p_UserLastName varchar(20),p_UserNickName varchar(50))
BEGIN

UPDATE tblUser

SET U_FirstName = p_UserName,

	U_LastName  = p_UserLastName,

	U_NickName=p_UserNickName,

    Display_Name=p_DisplayName



WHERE UserID = p_UserID ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateUserManualAward_Popup
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateUserManualAward_Popup`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateUserManualAward_Popup`(p_UserID int, p_AwardID int)
BEGIN

	

UPDATE tblUserAwards SET popup_showed = 1 WHERE tbluserawards.user_id= p_UserID AND tbluserawards.award_id = p_AwardID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateUserMass
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateUserMass`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateUserMass`(p_CurrentLevel int,p_NextLevel int,p_UserID INT , p_SiteID INT , p_SysRole varchar(50) , p_RolesID INT , p_Active tinyint(4),p_ManagerID INT)
BEGIN

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 

    BEGIN

        ROLLBACK;        

    END;



	START TRANSACTION;

		UPDATE tblUser

		SET 

				U_SiteID = p_SiteID ,

				U_SysRole = p_SysRole ,

				U_RolesID = p_RolesID ,

				Active = p_Active,

				ManagerID = p_ManagerID,

				ActiveUpdatedDate = CURRENT_TIMESTAMP()

		WHERE UserID = p_UserID ;

		IF ( NOT EXISTS(SELECT * FROM tblLevelPerformance WHERE user_id = p_UserID and current_level = p_CurrentLevel))

		THEN



		Set @previous =(select last_level from tblLevelPerformance 

										where  user_id=p_UserID AND (SELECT Role_ID FROM tblLevel WHERE Level_ID IN (SELECT Level_ID FROM tblLevel WHERE Role_ID = p_RolesID) LIMIT 1) = p_RolesID and level_achieved =0);



		update tblLevelPerformance

		set level_achieved =1

		where  user_id=p_UserID AND (SELECT Role_ID FROM tblLevel WHERE Level_ID IN (SELECT Level_ID FROM tblLevel WHERE Role_ID = p_RolesID) LIMIT 1) = p_RolesID and level_achieved =0;



			

				Insert into tblLevelPerformance(user_id,current_level,next_level,last_level,level_achieved,target_scores,achieved_scores)

				Values(p_UserID,p_CurrentLevel,p_NextLevel,IFNULL(@previous,'0'),0,(Select IFNULL(Sum(Target_Value),'0') from tblTarget

				where Role_ID =p_RolesID AND Level_ID=p_CurrentLevel),0);

			

		End IF;





Commit;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UpdateUser_Admin
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UpdateUser_Admin`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UpdateUser_Admin`(p_Hours int,p_Points int,p_previousLevel int,p_CurrentLevel int,p_NextLevel int,p_LastLevel int,p_LevelAchieved int,p_UserID INT , p_U_LastName varchar(50) , p_U_NickName varchar(50) , p_U_Email varchar(50) , p_U_SiteID INT , p_U_SysRole varchar(50) , p_U_RolesID INT , p_Active tinyint(1), p_U_FirstName varchar(50),p_ActiveUpdateStatus INT , p_ManagerID INT)
BEGIN

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 

    BEGIN

        ROLLBACK;        

    END;



	START TRANSACTION;

	

IF(p_ActiveUpdateStatus = 1)

THEN

UPDATE tblUser

SET U_LastName = p_U_LastName ,

		U_NickName = p_U_NickName ,		

		U_Email = p_U_Email ,

		U_SiteID = p_U_SiteID ,

		U_SysRole = p_U_SysRole ,

		U_RolesID = p_U_RolesID ,

		Active = p_Active,

		U_FirstName = p_U_FirstName,

		ActiveUpdatedDate = CURRENT_TIMESTAMP(),

		ManagerID = p_ManagerID,

		U_Points=p_Points

WHERE UserID = p_UserID ;



Update tblLevelPerformance

Set Worked_Hour=p_Hours

Where user_id=p_UserID and level_achieved=0;



ELSE

UPDATE tblUser

SET U_LastName = p_U_LastName ,

		U_NickName = p_U_NickName ,		

		U_Email = p_U_Email ,

		U_SiteID = p_U_SiteID ,

		U_SysRole = p_U_SysRole ,

		U_RolesID = p_U_RolesID ,

		Active = p_Active,

		U_FirstName = p_U_FirstName,

		ManagerID = p_ManagerID,

        U_Points=p_Points

WHERE UserID = p_UserID ;



update tblLevelPerformance

set level_achieved =1

where  tblLevelPerformance.current_level=p_previousLevel and user_id=p_UserID;



insert into tblLevelPerformance(user_id,current_level,next_level,last_level,level_achieved,target_scores,achieved_scores)

values(p_UserID,p_CurrentLevel,p_NextLevel,p_LastLevel,p_LevelAchieved,(Select IFNULL(Sum(Target_Value),'0') from tblTarget

where Role_ID =p_U_RolesID AND Level_ID=p_CurrentLevel),0);



Update tblLevelPerformance

Set Worked_Hour=p_Hours

Where user_id=p_UserID and level_achieved=0;





END IF;

Commit;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_Update_UserAwardAchieved
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_Update_UserAwardAchieved`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_Update_UserAwardAchieved`(p_UserID INT,p_AwardID INT)
BEGIN





	/*

	INSERT INTO tblUserAwardAchieved 

	(UserID,Award_ID)



	values(p_UserID,p_AwardID);*/







IF ( NOT EXISTS(SELECT * FROM tblUserAwards WHERE user_id=p_UserID AND award_id =p_AwardID ))

then





INSERT INTO tblUserAwards ( user_id,award_id,manual,popup_showed)

      VALUES (p_UserID,p_AwardID,0,0);






/*
Else





Update tblUserAwards



Set popup_showed=1,awarded_date=NOW()



WHERE user_id=p_UserID AND award_id =p_AwardID;*/





End IF;

















END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_Update_UserAwardAchievedpopup
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_Update_UserAwardAchievedpopup`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_Update_UserAwardAchievedpopup`(p_UserID INT,p_AwardID INT)
BEGIN

Update tblUserAwards



Set popup_showed=1,awarded_date=NOW()



WHERE user_id=p_UserID AND award_id =p_AwardID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_Update_UserTargetAchieved
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_Update_UserTargetAchieved`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_Update_UserTargetAchieved`(p_UserID INT,p_TargetID INT)
BEGIN

IF ( NOT EXISTS(SELECT * FROM tblUserTargetAchieved WHERE tblUserTargetAchieved.UserID = p_UserID and tblUserTargetAchieved.Target_ID=p_TargetID))
	THEN
	INSERT INTO tblUserTargetAchieved(UserID,Target_ID)
	values(p_UserID,p_TargetID);

	UPDATE tblUser SET U_Points = U_Points + (SELECT Points FROM tblTarget WHERE Target_ID = p_TargetID)
	WHERE UserID = p_UserID;

ELSE

CALL DuplicatePRO;

	END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_UserQuizScore
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_UserQuizScore`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_UserQuizScore`(UserID int)
BEGIN



SELECT

tblQuizGames.GameId,

tblQuizGames.GameName,imageName,



(Select max(DateTime) from tblUserQuizScore where game_id=tblQuizGames.GameId and user_id=UserID) 

as DateTime,



(Select ifnull(sum(AchievedScore),0) from v_UserQuizScore where game_id=tblQuizGames.GameId 

and user_id=UserID 

LIMIT 1)  as YourBest,



(Select  ifnull(Max(AchievedScore),0) from v_UserQuizScore where game_id=tblQuizGames.GameId 

LIMIT 1) 

as TopScorer,



(Select Username from v_UserQuizScore where game_id=tblQuizGames.GameId and 

AchievedScore=(Select  ifnull(Max(AchievedScore),0) from v_UserQuizScore 

where game_id=tblQuizGames.GameId LIMIT 1) LIMIT 1) as TopScorerName



FROM

tblQuizGames

ORDER BY

tblQuizGames.GameId ASC;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deletekpi
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_deletekpi`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_deletekpi`(kpiid int)
BEGIN

delete from tblKPI where KPI_ID = kpiid ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deletelevel
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_deletelevel`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_deletelevel`(p_LevelID int,p_LevelPosition int,p_RoleID int)
BEGIN
IF ( NOT EXISTS(SELECT * FROM tblLevelPerformance WHERE current_level = p_LevelID or next_level =p_LevelID or last_level =p_LevelID ))
	THEN
delete from tblLevel where Level_ID = p_LevelID;
UPDATE tbllevel
set tbllevel.Level_Position = (tbllevel.Level_Position - 1)
Where tbllevel.Role_ID = p_RoleID AND tbllevel.Level_Position > p_LevelPosition
 ;
ELSE
		CALL DuplicatePRO;
END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deletereward
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_deletereward`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_deletereward`(rewardid int)
BEGIN

delete from tblRewards where Reward_ID = rewardid;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deleterole
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_deleterole`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_deleterole`(roleid int)
BEGIN

delete from tblRoles where Role_ID = roleid;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_insertPost
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_insertPost`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_insertPost`(p_PostTitle varchar(200),p_PostMessage varchar(5000),p_CreateDate datetime,p_CreatedBy int,p_PostTypeID int,p_RoleID int)
BEGIN

INSERT INTO tblPosts (PostTitle,PostMessage,CreateDate,CreatedBy,PostTypeID,RoleID)

VALUES(p_PostTitle,p_PostMessage,CURRENT_TIMESTAMP(),p_CreatedBy,p_PostTypeID,p_RoleID);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_insertPostReply
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_insertPostReply`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_insertPostReply`(`p_ReplyMessage` varchar(200),`p_RepliedBy` int,`p_ReplyDate` date,`p_PostID` int)
BEGIN



	INSERT INTO tblPostReplies(ReplyMessage,RepliedBy,ReplyDate,PostID)

  VALUES(p_ReplyMessage,p_RepliedBy,CURRENT_TIMESTAMP(),p_PostID);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_instertRepliedLike
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_instertRepliedLike`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_instertRepliedLike`(p_LikedBy int, p_LikeID int, p_PostID int)
BEGIN

	INSERT INTO tblPostRepliedLikes (RepliedLikeDate,LikedBy,LikeID,PostID)

Values(CURRENT_DATE(),p_LikedBy,p_LikeID,p_PostID);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_level_UpdateLevelInfo
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_level_UpdateLevelInfo`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_level_UpdateLevelInfo`(p_BaseHours int, p_Points int, p_LevelID int,

  p_LevelName varchar(50), p_CurrentlyIn varchar(45),

 p_Reach varchar(45), p_Game varchar(50),p_levelImage varchar(100),p_levelthumbnail varchar(100))
BEGIN



UPDATE tblLevel 

SET BaseHours = p_BaseHours,

		Level_Name = p_LevelName,

		Points = p_Points,

		CurrentlyIn = p_CurrentlyIn,

		Reach = p_Reach,

		Game = p_Game,
    
    ImageName =p_levelImage,
    
    ImageThumbnail =p_levelthumbnail



WHERE Level_ID = p_LevelID;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_levels_UpdateTargets
-- -----------------------------------------------------

USE `levelspro`;
DROP procedure IF EXISTS `levelspro`.`sp_levels_UpdateTargets`;

DELIMITER $$
USE `levelspro`$$
CREATE DEFINER=`root`@`%` PROCEDURE `sp_levels_UpdateTargets`(p_TargetID INT,p_TargetValue int,p_KpiID INT,p_Points int)
BEGIN

	

UPDATE tblTarget

SET Target_Value = p_TargetValue,

    KPI_ID = p_KpiID,

		Points = p_Points	



WHERE Target_ID = p_TargetID ;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `levelspro`.`login_duration`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`login_duration` ;
DROP TABLE IF EXISTS `levelspro`.`login_duration`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`login_duration` AS select `s`.`Id` AS `start_id`,`s`.`entry_date` AS `start_date`,`f`.`Id` AS `finish_id`,`f`.`entry_date` AS `finish_date`,((`f`.`entry_date` - `s`.`entry_date`) / 100) AS `duration_minutes`,(((`f`.`entry_date` - `s`.`entry_date`) / 100) / 60) AS `duration_hours` from (`levelspro`.`event_report` `s` join `levelspro`.`event_report` `f`) where ((`s`.`userid` = 55) and (`f`.`userid` = 55) and (`s`.`description` = 'login') and (`f`.`description` = 'logout')) order by `start_id`,`duration_minutes`;

-- -----------------------------------------------------
-- View `levelspro`.`total_hours_worked`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`total_hours_worked` ;
DROP TABLE IF EXISTS `levelspro`.`total_hours_worked`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`total_hours_worked` AS select sum(`levelspro`.`tbllevelperformance`.`Worked_Hour`) AS `sum(Worked_Hour)` from `levelspro`.`tbllevelperformance`;

-- -----------------------------------------------------
-- View `levelspro`.`total_levels`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`total_levels` ;
DROP TABLE IF EXISTS `levelspro`.`total_levels`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`total_levels` AS select count(0) AS `count(*)` from `levelspro`.`tbllevel` where (`levelspro`.`tbllevel`.`Active` = 1);

-- -----------------------------------------------------
-- View `levelspro`.`total_questions`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`total_questions` ;
DROP TABLE IF EXISTS `levelspro`.`total_questions`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`total_questions` AS select count(0) AS `count(*)` from `levelspro`.`tblquizquestions`;

-- -----------------------------------------------------
-- View `levelspro`.`total_sales`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`total_sales` ;
DROP TABLE IF EXISTS `levelspro`.`total_sales`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`total_sales` AS select sum(`v_userlevelscores`.`score`) AS `sum(score)` from `levelspro`.`v_userlevelscores` where (`v_userlevelscores`.`KPI_ID` = 69);

-- -----------------------------------------------------
-- View `levelspro`.`total_sites`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`total_sites` ;
DROP TABLE IF EXISTS `levelspro`.`total_sites`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`total_sites` AS select count(0) AS `count(*)` from `levelspro`.`tblsite` where (`levelspro`.`tblsite`.`Active` = 1);

-- -----------------------------------------------------
-- View `levelspro`.`total_users`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`total_users` ;
DROP TABLE IF EXISTS `levelspro`.`total_users`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`total_users` AS select `levelspro`.`tblroles`.`Role_Name` AS `Role`,count(`levelspro`.`tbluser`.`UserID`) AS `total` from (`levelspro`.`tbluser` left join `levelspro`.`tblroles` on((`levelspro`.`tbluser`.`U_RolesID` = `levelspro`.`tblroles`.`Role_ID`))) group by `levelspro`.`tblroles`.`Role_Name`;

-- -----------------------------------------------------
-- View `levelspro`.`v_userlevelscores`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `levelspro`.`v_userlevelscores` ;
DROP TABLE IF EXISTS `levelspro`.`v_userlevelscores`;
USE `levelspro`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `levelspro`.`v_userlevelscores` AS select `levelspro`.`tbluser`.`UserID` AS `UserID`,`levelspro`.`tbltarget`.`Role_ID` AS `Role_ID`,`levelspro`.`tbltarget`.`Level_ID` AS `Level_ID`,`levelspro`.`tbltarget`.`KPI_ID` AS `KPI_ID`,`levelspro`.`tbltarget`.`Target_ID` AS `Target_ID`,`levelspro`.`tbllevel`.`Level_Name` AS `Level_Name`,`levelspro`.`tblkpi`.`KPI_name` AS `KPI_name`,`levelspro`.`tbltarget`.`Target_Value` AS `Target_Value`,(select ifnull(sum(`levelspro`.`tblscores`.`Score`),0) AS `score` from `levelspro`.`tblscores` where ((`levelspro`.`tblscores`.`Type_ID` = `levelspro`.`tbltarget`.`KPI_ID`) and (`levelspro`.`tblscores`.`LevelID` = `levelspro`.`tbltarget`.`Level_ID`) and (`levelspro`.`tblscores`.`User_ID` = `levelspro`.`tbluser`.`UserID`) and (`levelspro`.`tblscores`.`U_Type` = 'KPI'))) AS `score`,ceiling((((select ifnull(sum(`levelspro`.`tblscores`.`Score`),0) AS `score` from `levelspro`.`tblscores` where ((`levelspro`.`tblscores`.`Type_ID` = `levelspro`.`tbltarget`.`KPI_ID`) and (`levelspro`.`tblscores`.`User_ID` = `levelspro`.`tbluser`.`UserID`) and (`levelspro`.`tblscores`.`LevelID` = `levelspro`.`tbltarget`.`Level_ID`) and (`levelspro`.`tblscores`.`U_Type` = 'KPI'))) / `levelspro`.`tbltarget`.`Target_Value`) * 100)) AS `current_percentage`,`levelspro`.`tbltarget`.`Points` AS `Points` from (((`levelspro`.`tbltarget` join `levelspro`.`tbllevel` on((`levelspro`.`tbltarget`.`Level_ID` = `levelspro`.`tbllevel`.`Level_ID`))) join `levelspro`.`tblkpi` on((`levelspro`.`tbltarget`.`KPI_ID` = `levelspro`.`tblkpi`.`KPI_ID`))) join `levelspro`.`tbluser` on((`levelspro`.`tbltarget`.`Role_ID` = `levelspro`.`tbluser`.`U_RolesID`)));

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
